using HtmlAgilityPack;
using Ionic.Zip;
using MediaPlayer.Domain;
using MediaPlayer.Extras;
using MediaPlayer.Global;
using Microsoft.WindowsAPICodePack.Shell;
using NAudio.Wave;
using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Resources;
using System.ServiceModel;
using System.Text;
using System.Threading;
using System.Web;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;

namespace MediaPlayer
{
    public partial class Dashboard : System.Web.UI.Page
    {
        private bool _signalSearchFolioElements = false;
        private string _argSearchFolioElements = null;
        private bool? _isPostbackExpected = null;

        #region Properties

        private List<Folio> folio_list;

        private List<Folio> folio_filteredList;

        private bool IsPostbackExpected
        {
            get
            {
                //only check expected postback when the request is actually a postback
                if (!Page.IsPostBack) return false;

                if (!_isPostbackExpected.HasValue)
                {
                    //compare server & client timestamps, if they don't match the postback was generated by a refresh.
                    _isPostbackExpected = ViewState["RequestTimestamp"].ToString() == Session["RequestTimestamp"].ToString();
                }
                return _isPostbackExpected.Value;
            }
        }

        #endregion Properties

        #region Events

        // Source: http://forums.asp.net/t/931180.aspx?Grab+resulting+HTML+from+aspx+page+and+save+to+file+or+put+in+email+

        protected override void Render(HtmlTextWriter writer)
        {
            StringBuilder sbOut = new StringBuilder();
            StringWriter swOut = new StringWriter(sbOut);
            HtmlTextWriter htwOut = new HtmlTextWriter(swOut);
            base.Render(htwOut);
            string sOut = sbOut.ToString();

            // Send sOut as an Email

            writer.Write(sOut);
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            string qs_folio = Request.QueryString["folioID"];
            string qs_loginToken = Request.QueryString["loginToken"];

            if (Session["UserID"] != null && Session["UserName"] != null)
            {
                if (!IsPostBack)
                {
                    string search = string.Empty;
                    if (!string.IsNullOrWhiteSpace(qs_folio))
                    {
                        search = qs_folio;
                        txbSearchBox1.Text = qs_folio;
                    }

                    SearchFolioElements(search);
                    LoadConfigurationValues();
                }
                else
                {
                    // Get saved folio
                    this.folio_list = (ViewState["folio_list"] != null) ? ViewState["folio_list"] as List<Folio> : this.folio_list;
                    if (HttpContext.Current.Session["folio_filteredList"] != null) // Has priority
                    {
                        this.folio_filteredList = HttpContext.Current.Session["folio_filteredList"] as List<Folio>;
                    }
                    else
                    {
                        this.folio_filteredList = (ViewState["folio_filteredList"] != null) ? ViewState["folio_filteredList"] as List<Folio> : this.folio_filteredList;
                    }

                    if (_hdnIsUpdateNeeded.Value == "true")
                    {
                        SearchFolioElements();
                    }
                }

                // Load Element Roles
                LoadRoles();

                // Load Element Types
                LoadTypes();
            }
            else
            {
                string returnURL = !string.IsNullOrWhiteSpace(qs_folio) ? "Login.aspx?folioID=" + qs_folio : "Login.aspx";
                if (!string.IsNullOrWhiteSpace(qs_loginToken))
                {
                    returnURL += "&loginToken=" + qs_loginToken;
                }
                Response.Redirect(returnURL);
            }
        }

        protected void Page_LoadComplete(object sender, EventArgs e)
        {
            if (_signalSearchFolioElements)
            {
                DoSearchFolioElements(_argSearchFolioElements);
            }
        }

        protected void Page_PreRender(object sender, EventArgs e)
        {
            Session["RequestTimestamp"] = DateTime.Now.Ticks.ToString();
            ViewState["RequestTimestamp"] = Session["RequestTimestamp"].ToString();
        }

        protected void btnDownload_Click(object sender, EventArgs e)
        {
            Response.Redirect("Extras/DownloadFile.ashx?fileName=fileName");
        }

        protected void btn_close_ServerClick(object sender, EventArgs e)
        {
            Logout();
        }

        protected void btnSearch_ServerClick(object sender, EventArgs e)
        {
            SearchFolioElements();
        }

        protected void btnConfirmUploadElement_ServerClick(object sender, EventArgs e)
        {
            if (this.IsPostbackExpected)
            {
                UploadFile();
            }
        }

        protected void btnSearchCandidate_Click(object sender, EventArgs e)
        {
            SearchFolioElements();
        }

        protected void Timer1_Tick(object sender, EventArgs e)
        {
            SearchFolioElements();
        }

        #endregion Events

        #region Private Methods

        /// <summary>
        /// Convierte el texto (si tiene) del input en formato de fecha.
        /// Si no es posible retorna la fecha actual.
        /// </summary>
        private DateTime GetDateTime(HtmlInputText input, string className, string methodName)
        {
            DateTime datetime = DateTime.Now;

            if (input != null && !string.IsNullOrWhiteSpace(input.Value))
            {
                Logger.LogDebug("(%s) (%s) -- Get datetime1: Intentando convertir a datetime. Formato: dd-MM-yyyy HH:mm:ss. Dato: " + input.Value, className, methodName);

                if (!DateTime.TryParseExact(input.Value, "dd-MM-yyyy HH:mm:ss", null, System.Globalization.DateTimeStyles.None, out datetime))
                {
                    datetime = DateTime.Now;

                    // #2- Logger exception
                    Logger.LogError("(%s) (%s) -- Excepcion. Convirtiendo a datetime.", className, methodName);
                    Logger.LogError("(%s) (%s) -- Dato: " + input.Value, className, methodName);
                }
            }

            return datetime;
        }

        private void UploadFile()
        {
            string folioID = _hdnFolioID_selected.Value;
            if (HttpContext.Current.Session["UserID"] != null && !string.IsNullOrWhiteSpace(folioID))
            {
                // #1- Logger variables
                System.Diagnostics.StackFrame stackFrame = new System.Diagnostics.StackFrame();
                string className = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
                string methodName = stackFrame.GetMethod().Name;

                // Source: http://stackoverflow.com/questions/1998452/accessing-input-type-file-at-server-side-in-asp-net

                /* ******** Get file extension ******** */
                string fileName = MyFileUpload.PostedFile.FileName;
                string file_extension = string.Empty;

                if (!string.IsNullOrWhiteSpace(fileName))
                {
                    file_extension = fileName.Substring(fileName.LastIndexOf('.'));
                }

                /* ******** Global variables ******** */
                string userID = HttpContext.Current.Session["UserID"].ToString();

                string repoFilename = "", repoFilenameAUX = "", fullLocalPath = "", relativeLocalPath = "";
                bool ok = true, isFileAUX_created = false, isWavFile = false;

                // File ID
                string guid = Guid.NewGuid().ToString();

                // Get DateTimes 1-2-3...
                DateTime datetime_final = GetDateTime(uploadDate, className, methodName);

                DateTime datetime2_a = GetDateTime(camarasDate1, className, methodName);

                DateTime datetime2_b = GetDateTime(camarasDate2, className, methodName);

                // If is NOT camera recording system function
                if (string.IsNullOrWhiteSpace(txbInputCameraNumber.Value))
                {
                    if (MyFileUpload != null && MyFileUpload.PostedFile != null && !string.IsNullOrWhiteSpace(MyFileUpload.PostedFile.FileName))
                    {
                        /* ******** Configuration variables ******** */

                        string original_filePath = MyFileUpload.PostedFile.FileName;

                        // Repository path
                        string localRepoPath = string.Empty;
                        if (ConfigurationManager.AppSettings != null)
                        {
                            localRepoPath = ConfigurationManager.AppSettings["LocalRepoPath"].ToString();
                        }

                        string server = string.Empty;
                        if (ConfigurationManager.AppSettings != null)
                        {
                            server = ConfigurationManager.AppSettings["DB_Server"].ToString();
                        }

                        // File name
                        repoFilename = guid + ".bin";

                        // File name auxiliar with real extension ==> To get the real duration
                        repoFilenameAUX = guid + file_extension;

                        // Repository relative path
                        relativeLocalPath = datetime_final.Year.ToString("D4") + "\\" + datetime_final.Month.ToString("D2") + "\\" +
                            datetime_final.Day.ToString("D2") + "\\" + datetime_final.Hour.ToString("D2") + "\\";

                        fullLocalPath = localRepoPath + relativeLocalPath; // REAL

                        if (!string.IsNullOrWhiteSpace(fullLocalPath) && !string.IsNullOrWhiteSpace(repoFilenameAUX) && !string.IsNullOrWhiteSpace(file_extension))
                        {
                            try
                            {
                                // Check if directory exists, if not creates it
                                if (!Directory.Exists(Path.GetDirectoryName(fullLocalPath)))
                                {
                                    Directory.CreateDirectory(Path.GetDirectoryName(fullLocalPath));
                                }

                                if (GetAutomaticConvertWavToMp3OnFileUpload())
                                {
                                    // Is WAVE format file ==> Convert to .mp3
                                    isWavFile = file_extension.ToLowerInvariant().Equals(".wav") ? true : false;
                                }

                                // File name auxiliar with real extension ==> To get real duration
                                MyFileUpload.PostedFile.SaveAs(fullLocalPath + repoFilenameAUX);
                                isFileAUX_created = true;
                            }
                            catch (Exception e)
                            {
                                // #2- Logger exception
                                Logger.LogError("(%s) (%s) -- Excepcion. Copiando archivo AUX al server. ERROR: %s", className, methodName, e.Message);
                                ok = false;
                            }
                        }
                    }
                }
                else
                {
                    // IS Camera recording system ****************************************************
                    ok = false;

                    string cameraNumber_str = txbInputCameraNumber.Value;

                    // WS InConcert Operaciones grabación settings
                    string WS_InConcert_Server = "192.168.10.31";
                    if (ConfigurationManager.AppSettings != null)
                    {
                        WS_InConcert_Server = ConfigurationManager.AppSettings["WS_InConcert_Server"].ToString();
                    }

                    string WS_InConcert_Port = "8081";
                    if (ConfigurationManager.AppSettings != null)
                    {
                        WS_InConcert_Port = ConfigurationManager.AppSettings["WS_InConcert_Port"].ToString();
                    }

                    string WS_InConcert_URL_operacionesGrabacion = "RecordingIntegration/WebServices/OperacionesGrabacion.asmx";
                    if (ConfigurationManager.AppSettings != null)
                    {
                        WS_InConcert_URL_operacionesGrabacion = ConfigurationManager.AppSettings["WS_InConcert_URL_operacionesGrabacion"].ToString();
                    }

                    // WS Endpoint
                    EndpointAddress endpointUser = new EndpointAddress(new Uri("http://" + WS_InConcert_Server + ":" + WS_InConcert_Port + "/" + WS_InConcert_URL_operacionesGrabacion));

                    // WS client
                    var wsClient = new RecordingIntegration.OperacionesGrabacionSoapBindingClient("OperacionesGrabacionSoapBinding", endpointUser);

                    // Call WS operation
                    wsClient.videoAsociado(folioID, userID, cameraNumber_str, datetime2_a.ToString("dd'/'MM'/'yyyy HH':'mm"), datetime2_b.ToString("dd'/'MM'/'yyyy HH':'mm"));
                }

                /* ******** Save in DB - ONLY in NOT Camera recording system cases ******** */

                string real_fileName = string.Empty;
                if (!string.IsNullOrWhiteSpace(fileName))
                {
                    real_fileName = Path.GetFileName(fileName);
                }

                if (ok && !string.IsNullOrWhiteSpace(file_extension) && !string.IsNullOrWhiteSpace(real_fileName)
                    && !string.IsNullOrWhiteSpace(relativeLocalPath) && !string.IsNullOrWhiteSpace(repoFilename)
                    && !string.IsNullOrWhiteSpace(fullLocalPath) && !string.IsNullOrWhiteSpace(repoFilenameAUX)
                    && MyFileUpload != null && MyFileUpload.PostedFile != null)
                {
                    // Get file MediaType
                    string mediaType = GetFileMediaType(file_extension);

                    try
                    {
                        /*************** Get Duration ***************/
                        // Source: http://stackoverflow.com/questions/1256841/c-sharp-get-video-file-duration-from-metadata

                        //Source: http://www.codeproject.com/Articles/43208/How-to-get-the-length-duration-of-a-media-File-in-.aspx
                        // http://forums.asp.net/t/1679210.aspx?Get+Video+duration+after+uploading+asp+net+C+

                        double seconds = 0;
                        ShellFile so = ShellFile.FromFilePath(fullLocalPath + repoFilenameAUX);
                        double nanoseconds;
                        double.TryParse(so.Properties.System.Media.Duration.Value.ToString(), out nanoseconds);
                        if (nanoseconds > 0)
                        {
                            seconds = Convert100NanosecondsToMilliseconds(nanoseconds) / 1000;
                        }
                        /*************** END ***************/

                        /*************** Finally save the file in server ***************/

                        // Check if directory exists, if not creates it
                        if (!Directory.Exists(Path.GetDirectoryName(fullLocalPath)))
                        {
                            Directory.CreateDirectory(Path.GetDirectoryName(fullLocalPath));
                        }

                        bool normal_save = true;

                        // If .wav format file ==> convert to .mp3 then save the file
                        if (isWavFile)
                        {
                            // NAudio Source: http://stackoverflow.com/questions/7175701/converting-wav-file-to-wav-file-changing-format
                            try
                            {
                                WaveFormat target = new WaveFormat(44100, 16, 1);
                                using (WaveStream stream = new WaveFileReader(fullLocalPath + repoFilenameAUX))
                                {
                                    WaveFormatConversionStream str = new WaveFormatConversionStream(target, stream);
                                    WaveFileWriter.CreateWaveFile(fullLocalPath + repoFilename, str);
                                }

                                // Update file name (new format: .mp3)
                                if (!string.IsNullOrWhiteSpace(fileName))
                                {
                                    real_fileName = real_fileName.Substring(0, real_fileName.LastIndexOf('.')) + ".mp3";
                                }
                                normal_save = false;
                            }
                            catch (Exception e)
                            {
                                // #2- Logger exception
                                Logger.LogError("(%s) (%s) -- Excepcion. Convirtiendo de .wav a mp3. Si falla lo guarda como .wav. ERROR: %s", className, methodName, e.Message);
                                normal_save = true;
                            }
                        }

                        if (normal_save)
                        {
                            // If not .wav format
                            MyFileUpload.PostedFile.SaveAs(fullLocalPath + repoFilename);
                        }

                        /*************** END ***************/

                        /*************** Save in DB ***************/

                        string bd_path = relativeLocalPath.Replace("\\", "/") + repoFilename;
                        Global.GlobalMethods.AddFolioFile(userID, folioID, real_fileName, datetime_final, Convert.ToInt32(seconds), mediaType, bd_path);

                        /*************** END ***************/
                    }
                    catch (Exception e)
                    {
                        // #2- Logger exception
                        Logger.LogError("(%s) (%s) -- Excepcion. Obteniendo duración de archivo a subir, convirtiendo de .wav a mp3 si aplica, copiando archivo al server y guardando en BD. ERROR: %s", className, methodName, e.Message);
                        ok = false;
                    }
                }

                // Delete File name auxiliar with real extension
                if (isFileAUX_created)
                {
                    try
                    {
                        if (File.Exists(fullLocalPath + repoFilenameAUX))
                        {
                            File.Delete(fullLocalPath + repoFilenameAUX);
                        }
                    }
                    catch (Exception e)
                    {
                        // #2- Logger exception
                        Logger.LogError("(%s) (%s) -- Excepcion. Borrando archivo subido auxiliar para obtener duracion. ERROR: %s", className, methodName, e.Message);
                    }
                }

                // Reload elements
                SearchFolioElements();
            }
        }

        private bool GetAutomaticConvertWavToMp3OnFileUpload()
        {
            bool _AutomaticConvertWavToMp3OnFileUpload = true;
            if (ConfigurationManager.AppSettings != null)
            {
                if (!bool.TryParse(ConfigurationManager.AppSettings["AutomaticConvertWavToMp3OnFileUpload"].ToString().ToLowerInvariant(), out _AutomaticConvertWavToMp3OnFileUpload))
                {
                    _AutomaticConvertWavToMp3OnFileUpload = true;
                }
            }
            return _AutomaticConvertWavToMp3OnFileUpload;
        }

        private string GetFileMediaType(string file_extension)
        {
            var extension = file_extension.TrimStart('.');

            string mediaType = "D";
            switch (extension.ToLowerInvariant())
            {
                case "fbs":
                    {
                        mediaType = "S";
                        break;
                    }
                case "wav":
                case "mp3":
                case "wma":
                case "m4a":
                case "oga":
                    {
                        mediaType = "A";
                        break;
                    }
                case "avi":
                case "wmv":
                case "mp4":
                case "webm":
                case "ogg":
                    {
                        mediaType = "V";
                        break;
                    }
                case "png":
                case "jpg":
                case "jepg":
                case "bmp":
                case "tiff":
                case "gif":
                    {
                        mediaType = "I";
                        break;
                    }
            }
            return mediaType;
        }

        private int GetFileDuration(string path, string mediaType)
        {
            int real_duration = 0;
            if (mediaType == "A" || mediaType == "V")
            {
                // #1- Logger variables
                System.Diagnostics.StackFrame stackFrame = new System.Diagnostics.StackFrame();
                string className = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
                string methodName = stackFrame.GetMethod().Name;

                // Getting the Audio length
                // fullLocalPath + repoFilename
                try
                {
                    using (var wfr = new WaveFileReader(path))
                    {
                        real_duration = (int)wfr.TotalTime.TotalSeconds;
                    }
                }
                catch (Exception e)
                {
                    // #2- Logger exception
                    Logger.LogError("(%s) (%s) -- Excepcion. Obteniendo duracion de archivo a subir. ERROR: %s", className, methodName, e.Message);
                }
            }
            return real_duration;
        }

        private void LoadConfigurationValues()
        {
            string repo = "/inConcert/Repository/";
            if (ConfigurationManager.AppSettings != null)
            {
                repo = ConfigurationManager.AppSettings["LocalRepoPath"].ToString().Replace("\\", "/");
            }
            _hdnLocalRepository.Value = repo;

            // WS Oreka settings
            string WS_Oreka_Server = "192.168.10.31";
            if (ConfigurationManager.AppSettings != null)
            {
                WS_Oreka_Server = ConfigurationManager.AppSettings["WS_Oreka_Server"].ToString();
            }
            _hdnWS_Oreka_Server.Value = WS_Oreka_Server;

            string WS_Oreka_Port = "8080";
            if (ConfigurationManager.AppSettings != null)
            {
                WS_Oreka_Port = ConfigurationManager.AppSettings["WS_Oreka_Port"].ToString();
            }
            _hdnWS_Oreka_Port.Value = WS_Oreka_Port;

            string WS_Oreka_URL = "icweb/replay";
            if (ConfigurationManager.AppSettings != null)
            {
                WS_Oreka_URL = ConfigurationManager.AppSettings["WS_Oreka_URL"].ToString();
            }
            _hdnWS_Oreka_URL.Value = WS_Oreka_URL;

            // WS InConcert settings
            string WS_InConcert_Server = "192.168.10.31";
            if (ConfigurationManager.AppSettings != null)
            {
                WS_InConcert_Server = ConfigurationManager.AppSettings["WS_InConcert_Server"].ToString();
            }
            _hdnWS_InConcert_Server.Value = WS_InConcert_Server;

            string WS_InConcert_Port = "8081";
            if (ConfigurationManager.AppSettings != null)
            {
                WS_InConcert_Port = ConfigurationManager.AppSettings["WS_InConcert_Port"].ToString();
            }
            _hdnWS_InConcert_Port.Value = WS_InConcert_Port;

            string WS_InConcert_URL_download = "RecordingIntegration/WebServices/Download.aspx";
            if (ConfigurationManager.AppSettings != null)
            {
                WS_InConcert_URL_download = ConfigurationManager.AppSettings["WS_InConcert_URL_download"].ToString();
            }
            _hdnWS_InConcert_URL_download.Value = WS_InConcert_URL_download;

            // FBS player settings ----
            // Player default size
            string fbs_width = "557px";
            if (ConfigurationManager.AppSettings != null)
            {
                fbs_width = ConfigurationManager.AppSettings["PlayerFBS_width"].ToString();
            }
            _hdnFbs_width.Value = fbs_width;

            string fbs_height = "390px";
            if (ConfigurationManager.AppSettings != null)
            {
                fbs_height = ConfigurationManager.AppSettings["PlayerFBS_height"].ToString();
            }
            _hdnFbs_height.Value = fbs_height;

            // Player fullscreen size
            string fbs_fullscreen_width = "557px";
            if (ConfigurationManager.AppSettings != null)
            {
                fbs_fullscreen_width = ConfigurationManager.AppSettings["PlayerFBS_fullscreen_width"].ToString();
            }
            _hdnPlayerFBS_fullscreen_width.Value = fbs_fullscreen_width;

            string fbs_fullscreen_height = "390px";
            if (ConfigurationManager.AppSettings != null)
            {
                fbs_fullscreen_height = ConfigurationManager.AppSettings["PlayerFBS_fullscreen_height"].ToString();
            }
            _hdnPlayerFBS_fullscreen_height.Value = fbs_fullscreen_height;

            // Player popup size
            string fbs_popup_width = "300";
            if (ConfigurationManager.AppSettings != null)
            {
                fbs_popup_width = ConfigurationManager.AppSettings["PlayerFBS_popup_width"].ToString();
            }
            _hdnPlayerFBS_popup_width.Value = fbs_popup_width;

            string fbs_popup_height = "500";
            if (ConfigurationManager.AppSettings != null)
            {
                fbs_popup_height = ConfigurationManager.AppSettings["PlayerFBS_popup_height"].ToString();
            }
            _hdnPlayerFBS_popup_height.Value = fbs_popup_height;

            string Webchimera_Install_URL = "https://github.com/RSATom/WebChimera/releases/download/v0.2.9/WebChimera_0.2.9_vlc_2.2.1.msi";
            if (ConfigurationManager.AppSettings != null)
            {
                Webchimera_Install_URL = ConfigurationManager.AppSettings["Webchimera_Install_URL"].ToString();
            }
            _hdnWebchimera_Install_URL.Value = Webchimera_Install_URL;

            string MaxElementsDownload = "6";
            if (ConfigurationManager.AppSettings != null)
            {
                MaxElementsDownload = ConfigurationManager.AppSettings["MaxElementsDownload"].ToString();
            }
            _hdnMaxElementsDownload.Value = MaxElementsDownload;

            string AutoRefreshDataTimeMilliseconds = "300000";
            if (ConfigurationManager.AppSettings != null)
            {
                AutoRefreshDataTimeMilliseconds = ConfigurationManager.AppSettings["AutoRefreshDataTimeMilliseconds"].ToString();
            }

            int data_time = 30000;
            if (!int.TryParse(AutoRefreshDataTimeMilliseconds, out data_time))
            {
                data_time = 30000;
            }
            Timer1.Interval = data_time;

            string Globalplay_defaultDuration = "6";
            if (ConfigurationManager.AppSettings != null)
            {
                Globalplay_defaultDuration = ConfigurationManager.AppSettings["Globalplay_defaultDuration"].ToString();
            }
            _hdnGlobalplay_defaultDuration.Value = Globalplay_defaultDuration;

            string Globalplay_maxCollisionElements = "8";
            if (ConfigurationManager.AppSettings != null)
            {
                Globalplay_maxCollisionElements = ConfigurationManager.AppSettings["Globalplay_maxCollisionElements"].ToString();
            }
            _hdnGlobalplay_maxCollisionElements.Value = Globalplay_maxCollisionElements;
        }

        private void Logout()
        {
            Session["UserID"] = null;
            Session["UserName"] = null;
            Response.Redirect("Login.aspx");
        }

        private void LoadTypes()
        {
            List<string> list_mediaTypes = GlobalMethods.GetMediaTypes();
            if (list_mediaTypes != null && list_mediaTypes.Count > 0)
            {
                StringBuilder htmlCheckTypes = new StringBuilder();

                int index = 1;
                foreach (string media in list_mediaTypes)
                {
                    string media_name = media;
                    switch (media)
                    {
                        case "S":
                            {
                                media_name = "Grabaciones de pantalla (P)";
                                break;
                            }
                        case "A":
                            {
                                media_name = "Audios (A)";
                                break;
                            }
                        case "V":
                            {
                                media_name = "Videos (V)";
                                break;
                            }
                        case "D":
                            {
                                media_name = "Documentos u otros (D)";
                                break;
                            }
                        case "C":
                            {
                                media_name = "Comentarios (C)";
                                break;
                            }
                        case "I":
                            {
                                media_name = "Imágenes (I)";
                                break;
                            }
                    }
                    if (index % 2 != 0)
                    {
                        htmlCheckTypes.AppendLine("<div class='row'>");
                    }

                    htmlCheckTypes.AppendLine("<div class='col-sm-6'>");
                    htmlCheckTypes.AppendLine("<div class='checkbox pull-left' style='margin-left:8px;'>");
                    htmlCheckTypes.AppendLine("<label>");
                    htmlCheckTypes.AppendLine("<input type='checkbox' name='checkbox_type_" + media + "' type_name=" + media + "  onclick='prepareFilterTimelineElements(this, \"type\", \"" + media + "\")' checked>" + media_name);
                    htmlCheckTypes.AppendLine("</label>");
                    htmlCheckTypes.AppendLine("</div>");
                    htmlCheckTypes.AppendLine("</div>");

                    if (index % 2 == 0 || index == list_mediaTypes.Count)
                    {
                        htmlCheckTypes.AppendLine("</div>");
                    }

                    index++;
                }
                litCheckTypes.Text = htmlCheckTypes.ToString();
            }
        }

        private void LoadRoles()
        {
            if (this.folio_filteredList != null && this.folio_filteredList.Count > 0)
            {
                StringBuilder RtrnHtml = new StringBuilder();
                List<string> list_userGroups = Domain.User.GetUserGroupsNew(this.folio_filteredList.Where(x => x.deleted == 0).ToList());
                if (list_userGroups != null && list_userGroups.Count > 0)
                {
                    int index = 1;
                    StringBuilder htmlCheckRoles = new StringBuilder();
                    foreach (string group in list_userGroups)
                    {
                        if (index % 2 != 0)
                        {
                            htmlCheckRoles.AppendLine("<div class='row'>");
                        }

                        htmlCheckRoles.AppendLine("<div class='col-sm-6'>");
                        htmlCheckRoles.AppendLine("<div class='checkbox pull-left' style='margin-left:8px;'>");
                        htmlCheckRoles.AppendLine("<label>");
                        htmlCheckRoles.AppendLine("<input type='checkbox' name='checkbox_role_" + group + "' onclick='prepareFilterTimelineElements(this, \"role\", \"" + group + "\")' checked>" + group);
                        htmlCheckRoles.AppendLine("</label>");
                        htmlCheckRoles.AppendLine("</div>");
                        htmlCheckRoles.AppendLine("</div>");

                        if (index % 2 == 0 || index == list_userGroups.Count)
                        {
                            htmlCheckRoles.AppendLine("</div>");
                        }

                        index++;
                    }
                    litCheckRoles.Text = htmlCheckRoles.ToString();
                }
            }
        }

        private void SearchFolioElements(string qs_folioID = "")
        {
            // Prepare to run the search after loading & event handling stage in page lifecycle:
            _signalSearchFolioElements = true;
            _argSearchFolioElements = qs_folioID;
        }

        /// <summary>
        /// Returns elements from only 1 Folio
        /// </summary>
        /// <param name="qs_folioID"></param>
        private void DoSearchFolioElements(string qs_folioID = "")
        {
            int index = 0;
            StringBuilder htmlTable = new StringBuilder();

            /****** Table headers ******/

            htmlTable.AppendLine("<table class='table unselectable' id='tblLeftGridElements'>"); // style='display:none;'
            htmlTable.AppendLine("<thead>");
            htmlTable.AppendLine("<tr style='background: #446e9b; color: whitesmoke;'>");
            htmlTable.AppendLine("<th width='3%' style='text-align: center;'><input type='checkbox' id='chbSelectAll' name='timeline_elements_checkAll' class='button' checked></th>");
            htmlTable.AppendLine("<th width='3%' style='text-align: center;'>#</th>");
            htmlTable.AppendLine("<th width='5%' style='text-align: center;'>Usuario</th>");
            htmlTable.AppendLine("<th width='8%' style='text-align: center;'>Local Party</th>");
            htmlTable.AppendLine("<th width='5%' style='text-align: center;'>Remote Party</th>");
            htmlTable.AppendLine("<th width='5%' style='text-align: center;'>Tipo</th>");
            htmlTable.AppendLine("<th width='6%' style='text-align: center;'>Inicio</th>");
            htmlTable.AppendLine("<th width='3%' style='text-align: center;'>Duración</th>");
            htmlTable.AppendLine("</tr>");
            htmlTable.AppendLine("</thead>");
            htmlTable.AppendLine("<tbody>");

            if (string.IsNullOrWhiteSpace(qs_folioID))
            {
                if (!string.IsNullOrWhiteSpace(txbSearchBox1.Text))
                {
                    qs_folioID = txbSearchBox1.Text;
                }
            }

            if (!string.IsNullOrWhiteSpace(qs_folioID))
            {
                this.folio_list = Global.GlobalMethods.GetAllFolios(qs_folioID);
                ViewState["folio_list"] = this.folio_list;

                if (this.folio_list != null && this.folio_list.Count > 0)
                {
                    this.folio_filteredList = this.folio_list.FindAll(x => x.deleted == 0);
                    ViewState["folio_filteredList"] = this.folio_filteredList;

                    string hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName = string.Empty;
                    string hdnElementsIDChecked = string.Empty;

                    // Json object
                    RootObject json_elementList = new RootObject();
                    json_elementList.name = "Elements";
                    json_elementList.color = "#000000";

                    DateTime folio_start = DateTime.MaxValue;
                    DateTime folio_end = DateTime.MinValue;
                    //

                    List<Folio> list = this.folio_filteredList.Where(x => x.deleted == 0).ToList();
                    if (list != null && list.Count > 0)
                    {
                        // Save FolioID only if get results
                        ViewState["FolioID"] = qs_folioID;
                        _hdnFolioID.Value = qs_folioID;

                        foreach (Folio folio in list)
                        {
                            index++;

                            string end_date = folio.timestamp.AddSeconds(folio.duration).ToString("dd'-'MM'-'yyyy HH':'mm':'ss");

                            // Duration
                            TimeSpan time = TimeSpan.FromSeconds(folio.duration);
                            string duration_formatStr = time.ToString(@"hh\:mm\:ss");

                            /****** Hidden fields ******/
                            hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName
                                += folio.tapeID + "#" + folio.groupName + "#" + folio.mediaType.ToString() + "#" + folio.duration + "#" + folio.timestamp.ToString("dd'-'MM'-'yyyy HH':'mm':'ss")
                                + "#" + folio.segmentID + "#" + index + "#" + folio.fileName + "#" + end_date + "#" + folio.filePath + "#" + duration_formatStr + "#" + folio.fileStatus + "#" + folio.userName + "$";

                            // Get max and min value
                            folio_start = folio_start > folio.timestamp ? folio.timestamp : folio_start;
                            folio_end = folio_end < folio.timestamp.AddSeconds(folio.duration) ? folio.timestamp.AddSeconds(folio.duration) : folio_end;

                            /****** Create json data ******/
                            Span json_element = new Span();
                            json_element.name = folio.mediaType == "S" ? "P" : folio.mediaType;
                            json_element.start = folio.timestamp.ToString("dd'-'MM'-'yyyy HH':'mm':'ss");
                            json_element.end = end_date;
                            json_element.id = folio.tapeID.ToString();
                            json_element.type = folio.mediaType;
                            json_element.role = folio.groupName;

                            json_elementList.spans.Add(json_element);

                            // isExtra, type, icon and color
                            //bool isExtra = false; // If its taken from orkextra table
                            string icon = "glyphicon glyphicon-headphones";
                            string media_str = "Grabación";
                            string color_str = "";
                            switch (folio.mediaType)
                            {
                                case "S":
                                    {
                                        icon = "fa fa-video-camera";
                                        media_str = "Grabación";
                                        color_str = "blue";
                                        break;
                                    }
                                case "V":
                                    {
                                        icon = "glyphicon glyphicon-film";
                                        media_str = "Video";
                                        color_str = "purple";
                                        break;
                                    }
                                case "A":
                                    {
                                        icon = "glyphicon glyphicon-headphones";
                                        media_str = "Audio";
                                        color_str = "red";
                                        break;
                                    }
                                case "D":
                                    {
                                        icon = "fa fa-file-text";
                                        media_str = "Documento";
                                        color_str = "green";
                                        break;
                                    }
                                case "C":
                                    {
                                        icon = "glyphicon glyphicon-comment";
                                        media_str = "Comentario";
                                        color_str = "orange";
                                        break;
                                    }
                                case "I":
                                    {
                                        icon = "glyphicon glyphicon-picture";
                                        media_str = "Imagen";
                                        color_str = "Violet";
                                        break;
                                    }
                            }

                            // IsExtra = If filePath is NOT empty, then is extra from incextras table
                            bool isExtra = folio.filePath == string.Empty ? false : true;
                            if (folio.mediaType == "C")
                            {
                                isExtra = true;
                            }

                            string color_icon = "beige";
                            string tr_color = isExtra ? "inherit" : "#D1E2F3";
                            string tr_name = isExtra ? "Extra" : "Oreka";

                            // Onclick event
                            string onclick_event = FolioElements_GetOnClickEvent(folio, index, isExtra, duration_formatStr, media_str);

                            // Title
                            string title = folio.mediaType == "S" ? "Grabación de Pantalla" : media_str;

                            /****** Table data ******/
                            htmlTable.AppendLine("<tr id='tape_" + folio.tapeID + "' style='background-color: " + tr_color + ";' name='" + tr_name + "'>");
                            htmlTable.AppendLine("<td>");

                            htmlTable.AppendLine("<input type='checkbox' name='timeline_elements' class='button' value='" + folio.tapeID + "#" + isExtra.ToString().ToLowerInvariant() + "#" + folio.mediaType + "#" + folio.fileName + "' onclick='manageElement(this, " + folio.tapeID + ", " + (index - 1).ToString() + ", " + JsonConvert.SerializeObject(json_element) + ")' checked>");
                            htmlTable.AppendLine("<td>");
                            htmlTable.AppendLine("<h5>" + index + "</h5>");
                            htmlTable.AppendLine("<td>");
                            htmlTable.AppendLine("<h5>" + folio.userName + "</h5>");
                            htmlTable.AppendLine("<td>");
                            htmlTable.AppendLine("<h5>" + folio.localParty + "</h5>");
                            htmlTable.AppendLine("<td>");
                            htmlTable.AppendLine("<h5>" + folio.remoteParty + "</h5>");
                            htmlTable.AppendLine("<td>");

                            htmlTable.AppendLine("<button type='button' class='btn btn-default btn-sm' style='color:" + color_str + "; opacity: 0.9; background-color: " + color_icon + "; background-image: none;' name='btnTimelineElement' data-toggle='tooltip' ");
                            htmlTable.AppendLine("title=" + title + " onclick='" + onclick_event + "'><span class='" + icon + "' aria-hidden='true'></span></button>");
                            htmlTable.AppendLine("<td>");
                            htmlTable.AppendLine("<h5 id='timestamp'>" + folio.timestamp.ToString("dd'-'MM'-'yyyy HH':'mm':'ss") + "</h5>");
                            htmlTable.AppendLine("<td>");

                            htmlTable.AppendLine("<h5>" + duration_formatStr + "</h5>");
                            htmlTable.AppendLine("</tr>");
                        }
                    }

                    if (hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName.Length > 0)
                    {
                        hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName = hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName.Remove(hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName.Length - 1);
                        _hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName.Value = hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName;
                    }

                    /****** Load bottom Timeline ******/
                    string val1 = JsonConvert.SerializeObject(json_elementList);
                    string val2 = folio_start.ToString("dd'-'MM'-'yyyy HH':'mm':'ss");
                    string val3 = folio_end.ToString("dd'-'MM'-'yyyy HH':'mm':'ss");

                    _hdnJSonList.Value = val1;
                    _hdnJSonStart.Value = val2;
                    _hdnJSonEnd.Value = val3;

                    // Fire the timeframe drawing
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "pre_timeframe_prepare", "pre_timeframe_prepare();", true);
                }
                else
                {
                    // Folio does not exist
                    ViewState["FolioID"] = "0";
                    _hdnJSonEnd.Value = "0";

                    _hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName.Value = string.Empty;
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "clear_timeline", "clear_timeline();", true);
                }
            }
            else
            {
                // Empty Folio search textbox
                ViewState["FolioID"] = "0";
                _hdnJSonEnd.Value = "0";

                _hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName.Value = string.Empty;
                ScriptManager.RegisterStartupScript(this, typeof(Page), "clear_timeline", "clear_timeline();", true);
            }
            htmlTable.AppendLine("</tbody>");
            htmlTable.AppendLine("</table>");

            litTable.Text = htmlTable.ToString();

            lblResultsCount.Text = index.ToString();

            /****** Clear checkbox filters Rols and Types ******/
            LoadRoles();
            LoadTypes();

            // Change Roles and Types filter checkboxes to checked status
            ScriptManager.RegisterStartupScript(this, typeof(Page), "checkRolesAndTypesFilters", "checkRolesAndTypesFilters();", true);
        }

        private string FolioElements_GetOnClickEvent(Folio folio, int index, bool isExtra, string duration_formatStr, string media_str = "")
        {
            string onclick_event = string.Empty;
            if (folio != null)
            {
                media_str = string.IsNullOrWhiteSpace(media_str) ? GetMediaTypeName(folio) : media_str;

                onclick_event = "clickTimelineElement2(" + folio.tapeID + ", " + index + "," + folio.duration + ",\"";
                onclick_event += folio.timestamp.ToString("dd'-'MM'-'yyyy HH':'mm':'ss") + "\",\"" + media_str + "\",";
                onclick_event += folio.segmentID + ", \"" + isExtra.ToString().ToLowerInvariant() + "\", \"" + folio.fileName + "\",\"";
                onclick_event += folio.filePath + "\",\"" + duration_formatStr + "\",\"" + folio.mediaType + "\",\"" + folio.fileStatus + "\")";
            }
            return onclick_event;
        }

        protected void btnDownloadAll_Click(object sender, EventArgs e)
        {
            // Zip Source: http://www.aspsnippets.com/Articles/Download-multiple-files-as-Zip-Archive-File-in-ASPNet-using-C-and-VBNet.aspx
            using (ZipFile zip = new ZipFile())
            {
                zip.AlternateEncodingUsage = ZipOption.AsNecessary;

                bool ok = false;

                string[] elements_array;
                if (_hdnElementsToDownload.Value.Length > 0)
                {
                    elements_array = _hdnElementsToDownload.Value.Split('#');
                    if (elements_array != null && elements_array.Length > 0)
                    {
                        // #1- Logger variables
                        System.Diagnostics.StackFrame stackFrame = new System.Diagnostics.StackFrame();
                        string className = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
                        string methodName = stackFrame.GetMethod().Name;

                        string zipName = String.Format("Descarga_{0}.zip", DateTime.Now.ToString("MMM-dd-yyyy-HHmmss"));
                        string folderName = String.Format("Descarga_{0}", DateTime.Now.ToString("MMM-dd-yyyy-HHmmss"));

                        // Repository temp path
                        string repository_temp = string.Empty;
                        if (ConfigurationManager.AppSettings != null)
                        {
                            repository_temp = ConfigurationManager.AppSettings["LocalTempPath"].ToString();
                        }

                        try
                        {
                            // Check if directory exists, if not creates it
                            if (!Directory.Exists(Path.GetDirectoryName(repository_temp)))
                            {
                                Directory.CreateDirectory(Path.GetDirectoryName(repository_temp));
                            }

                            string[] fileData_array;
                            foreach (string element in elements_array)
                            {
                                if (!string.IsNullOrWhiteSpace(element))
                                {
                                    fileData_array = element.Split('$');
                                    if (fileData_array != null && fileData_array.Length > 2)
                                    {
                                        string file_path = fileData_array[0];
                                        string file_name = fileData_array[1];
                                        string file_isExtra = fileData_array[2];

                                        if (!string.IsNullOrWhiteSpace(file_path) && !string.IsNullOrWhiteSpace(file_name) && !string.IsNullOrWhiteSpace(file_isExtra))
                                        {
                                            string file_name2 = file_name;
                                            if (!file_isExtra.ToLowerInvariant().Equals("true"))
                                            {
                                                file_name2 = Path.GetFileName(file_name);
                                            }

                                            string final = Path.Combine(repository_temp, file_name2);

                                            try
                                            {
                                                // Get file from web service
                                                WebClient webClient = new WebClient();
                                                webClient.DownloadFile(file_path, final);

                                                // Add file to zip
                                                zip.AddFile(final, folderName);

                                                ok = true;
                                            }
                                            catch (Exception ex)
                                            {
                                                // #2- Logger exception
                                                Logger.LogError("(%s) (%s) -- Excepcion. Copiando archivo temporal al server para ser descargado en zip. ERROR: %s", className, methodName, ex.Message);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            // #2- Logger exception
                            Logger.LogError("(%s) (%s) -- Excepcion. Copiando archivo temporal al server para ser descargado en zip. ERROR: %s", className, methodName, ex.Message);
                        }
                        if (ok)
                        {
                            // Processing zip file
                            try
                            {
                                Response.Clear();
                                Response.BufferOutput = false;
                                Response.ContentType = "application/zip";
                                Response.AddHeader("content-disposition", "attachment; filename=" + zipName);
                                zip.Save(Response.OutputStream);

                                // Ensure that the zip file was downloaded before cleaning temp files
                                Thread.Sleep(300);

                                // Clearing temporary repository folder
                                try
                                {
                                    System.IO.DirectoryInfo di = new DirectoryInfo(repository_temp);
                                    foreach (FileInfo file in di.GetFiles())
                                    {
                                        file.Delete();
                                    }
                                    foreach (DirectoryInfo dir in di.GetDirectories())
                                    {
                                        dir.Delete(true);
                                    }
                                }
                                catch (Exception ex)
                                {
                                    // #2- Logger exception
                                    Logger.LogError("(%s) (%s) -- Excepcion. Limpiando archivos temporales. ERROR: %s", className, methodName, ex.Message);
                                }

                                // Fire the timeframe drawing
                                //ScriptManager.RegisterStartupScript(this, typeof(Page), "afterDownloadFiles", "afterDownloadFiles();", true);

                                // Close thread
                                Response.End();
                            }
                            catch (Exception ex)
                            {
                                // #2- Logger exception
                                Logger.LogError("(%s) (%s) -- Excepcion. Generando descarga de elementos zip. ERROR: %s", className, methodName, ex.Message);
                            }
                        }
                    }
                }
            }
        }

        protected void DownloadHTML_Click(object sender, EventArgs e)
        {
            // Source: http://stackoverflow.com/questions/13762338/read-files-from-a-folder-present-in-project
            Directory.SetCurrentDirectory(AppDomain.CurrentDomain.BaseDirectory);
            //string path = Path.Combine(Directory.GetCurrentDirectory(), @"MP_client\Multimedia_Player_client.html");

            // Get static HTML client
            string staticHTML_client = string.Empty;
            if (ConfigurationManager.AppSettings != null)
            {
                staticHTML_client = ConfigurationManager.AppSettings["staticHTML_client_path"].ToString();
            }
            string path = Path.Combine(Directory.GetCurrentDirectory(), staticHTML_client);

            if (File.Exists(path))
            {
                string html_str = File.ReadAllText(path);
                string id_str = "divElementos";

                // Get dynamic table
                //string dynamic_table = GetTable_download();
                string dynamic_table = litTable.Text;

                /* ************** */
                // HTML Agility Pack: http://htmlagilitypack.codeplex.com/wikipage?title=Examples
                // http://www.codeproject.com/Tips/804660/How-to-Parse-HTML-using-Csharp

                if (!string.IsNullOrWhiteSpace(html_str) && !string.IsNullOrWhiteSpace(id_str) && !string.IsNullOrWhiteSpace(dynamic_table))
                {
                    // Create document
                    HtmlDocument html_doc_Table = new HtmlDocument();
                    html_doc_Table.LoadHtml(dynamic_table);

                    // Create collection of tr nodes
                    HtmlNodeCollection tr_nodes_toDownload = new HtmlNodeCollection(html_doc_Table.DocumentNode);

                    /*

                    //------------------------------------------------------//-----------
                    // Json object
                    RootObject json_elementList = new RootObject();
                    json_elementList.name = "Elements";
                    json_elementList.color = "#000000";

                    DateTime folio_start = DateTime.MaxValue;
                    DateTime folio_end = DateTime.MinValue;
                    */



                    //------------------------------------------------------//-----------


                    string[] elements_array;
                    if (_hdnElementsToDownload.Value.Length > 0)
                    {
                        elements_array = _hdnElementsToDownload.Value.Split('#');
                        if (elements_array != null && elements_array.Length > 0)
                        {
                            int index = 1;
                            foreach (string segment_ID in elements_array)
                            {
                                if (!string.IsNullOrWhiteSpace(segment_ID))
                                {
                                    HtmlNode tr_node = html_doc_Table.DocumentNode.SelectSingleNode("//tr[@id='tape_" + segment_ID + "']");

                                    // Update index number
                                    html_doc_Table.DocumentNode.SelectSingleNode("//tr[@id='tape_" + segment_ID + "'] //h5").InnerHtml = index.ToString();
                                    tr_nodes_toDownload.Add(tr_node);

                                    index++;

                                    /*

                                    //
                                    HtmlNode tr_button_node = tr_node.SelectNodes("//button").LastOrDefault();
                                    string onclick = tr_button_node.Attributes["onclick"].Value;

                                    string[] values = onclick.Split(',');

                                    /****** Create json data ****** /
                                    Span json_element = new Span();
                                    json_element.name = values[10];
                                    json_element.start = values[3];
                                    json_element.end = "00:01:17"; // 
                                    json_element.id = segment_ID.ToString();
                                    json_element.type = values[10];
                                    json_element.role = "";

                                    // ACA json_element
                                    json_elementList.spans.Add(json_element);

                                    */
                                }
                            }
                        }
                    }


                    /*

                    <input type="hidden" name="ctl00$ContentBody$_hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName" id="ctl00_ContentBody__hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName" value="627#terminator#I#0#24-10-2015 00:27:40#627#1#CSYJ_014017.jpg#24-10-2015 00:27:40#2015/10/24/00/6aa0427b-2246-4895-8ac8-9372cfc9e13d.bin#00:00:00#OK#gonzalo$641#terminator#C#1#24-10-2015 00:27:40#641#2#ASdadasdasd#24-10-2015 00:27:41##00:00:01#OK#gonzalo$621#terminator#C#1#24-10-2015 00:27:46#621#3#Comentario1#24-10-2015 00:27:47##00:00:01#OK#gonzalo$666#terminator#D#0#24-10-2015 00:28:02#666#4#Economia.gif#24-10-2015 00:28:02#2015/10/24/00/ae6bb8fe-d6b3-4d6e-a591-71fc3084d737.bin#00:00:00#OK#gonzalo$665#terminator#D#0#24-10-2015 00:28:06#665#5#Economia_-_Copy.tiff#24-10-2015 00:28:06#2015/10/24/00/1ce43876-d379-4eb6-a0d3-dae61a0cc624.bin#00:00:00#OK#gonzalo$615#terminator#D#0#24-10-2015 00:28:15#615#6#UDELAR Ticket de confirmacion.pdf#24-10-2015 00:28:15#2015/10/24/00/0d837330-4131-440e-a7bf-4ec3d1621e5e.bin#00:00:00#OK#gonzalo$644#terminator#C#1#24-10-2015 00:28:22#644#7#Comentario 1 segundo#24-10-2015 00:28:23##00:00:01#OK#gonzalo$617#terminator#V#77#24-10-2015 00:28:28#617#8#Himno Uruguay (versión alternativa) - Uruguay National Anthem (alternate version).avi#24-10-2015 00:29:45#2015/10/24/00/913fb47f-d2e7-4422-931a-e9171f1f5470.bin#00:01:17#OK#gonzalo$630#terminator#I#0#24-10-2015 00:28:38#630#9#Cities wallpaper (78).jpg#24-10-2015 00:28:38#2015/10/24/00/129ca36c-4054-4c3b-b5db-652a328d8bc5.bin#00:00:00#OK#gonzalo$628#terminator#I#0#24-10-2015 00:28:45#628#10#Beautiful-City-Background-1600x1066.jpg#24-10-2015 00:28:45#2015/10/24/00/34f145bf-0760-491c-9902-b29aa711762f.bin#00:00:00#OK#gonzalo$629#terminator#I#0#24-10-2015 00:28:51#629#11#1757-hdr-wallpaper-city-desktop-wallpaper-1920x1200.jpg#24-10-2015 00:28:51#2015/10/24/00/94cd456f-c592-4daa-8468-34f7143df438.bin#00:00:00#OK#gonzalo$632#terminator#I#0#24-10-2015 00:28:53#632#12#CSYJ_014017.jpg#24-10-2015 00:28:53#2015/10/24/00/a821c8ca-bffb-42a1-a6c9-be8068b52c14.bin#00:00:00#OK#gonzalo$646#terminator#C#27#24-10-2015 00:29:04#646#13#27 seg#24-10-2015 00:29:31##00:00:27#OK#gonzalo$634#terminator#I#0#24-10-2015 00:29:15#634#14#CSYJ_014013.jpg#24-10-2015 00:29:15#2015/10/24/00/041a343e-b42f-40f2-8e99-9b8dd5a9d30d.bin#00:00:00#OK#gonzalo$679#terminator#I#0#24-10-2015 00:29:42#679#15#I2T11Sc.jpg#24-10-2015 00:29:42#2015/10/24/00/ae4b0df0-7b08-43ee-88a8-808a97eab0bc.bin#00:00:00#OK#gonzalo$639#terminator#C#1#24-10-2015 00:29:51#639#16#Prueba Folio destino 2#24-10-2015 00:29:52##00:00:01#OK#gonzalo$649#terminator#C#21#24-10-2015 00:30:07#649#17#Durango, MEX.#24-10-2015 00:30:28##00:00:21#OK#gonzalo$650#terminator#I#0#24-10-2015 00:30:12#650#18#SSPE.jpg#24-10-2015 00:30:12#2015/10/24/00/c35d5ab9-877c-4694-a67d-12c586ed7a51.bin#00:00:00#OK#gonzalo$658#terminator#I#0#24-10-2015 00:30:14#658#19#Durango.png#24-10-2015 00:30:14#2015/10/24/00/359aab37-93d7-4fa2-b99d-413c46a746f6.bin#00:00:00#OK#gonzalo$677#terminator#C#22#24-10-2015 00:30:32#677#20#Holaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa#24-10-2015 00:30:54##00:00:22#OK#gonzalo$661#terminator#V#4#24-10-2015 00:30:34#661#21#FlickAnimation.avi#24-10-2015 00:30:38#2015/10/24/00/0e9f63d7-f27b-4950-b9f1-a04cde51c80c.bin#00:00:04#OK#gonzalo$655#terminator#C#31#24-10-2015 00:30:37#655#22#Este es un comentario bien largo y loco. Lorem muchas veces. El gato se mueve.#24-10-2015 00:31:08##00:00:31#OK#gonzalo$618#terminator#A#44#24-10-2015 00:31:05#618#23#el mejor ringtone.mp3#24-10-2015 00:31:49#2015/10/24/00/7bdee11d-92c3-4390-a26c-d32890217af1.bin#00:00:44#OK#gonzalo$633#terminator#C#1#24-10-2015 00:31:11#633#24#Este es un comentario.#24-10-2015 00:31:12##00:00:01#OK#gonzalo$674#terminator#C#1#24-10-2015 00:31:21#674#25#Comentario largo1 Comentario largo2 Comentario largo3 Comentario largo4 Comentario largo5 Comentario largo6 Comentario largo7 Comentario largo8 Comentario largo9 Comentario largo10 Comentario largo11 Comentario largo12 Comentario largo13 Comentario largo1#24-10-2015 00:31:22##00:00:01#OK#gonzalo$619#terminator#A#119#24-10-2015 00:31:36#619#26#Ed-Sheeran-I-See-Fire-(Kygo-Remix).mp3#24-10-2015 00:33:35#2015/10/24/00/22f6eef7-2a2d-444b-a47a-8f17059778c2.bin#00:01:59#OK#gonzalo$648#terminator#C#57#24-10-2015 00:31:42#648#27#Coment 57 seg#24-10-2015 00:32:39##00:00:57#OK#gonzalo$84##S#68#24-10-2015 00:32:00#84#28#2015/10/24/00/20151023_172932_SGQL-1.fbs#24-10-2015 00:33:08##00:01:08#OK#$675#terminator#C#21#24-10-2015 00:33:19#675#29#Esto es un comentario largo. Esto es un comentario largo. Esto es un comentario largo. Esto es un comentario largo. Esto es un comentario largo. Esto es un comentario largo. Esto es un comentario largo. Esto es un comentario largo. Esto es un comentario l#24-10-2015 00:33:40##00:00:21#OK#gonzalo$645#terminator#C#289#24-10-2015 00:33:28#645#30#Comentario de 289 seg#24-10-2015 00:38:17##00:04:49#OK#gonzalo$654#terminator#C#26#24-10-2015 00:33:41#654#31#ppppp#24-10-2015 00:34:07##00:00:26#OK#gonzalo$676#terminator#C#1#24-10-2015 00:33:52#676#32#Hola Hola#24-10-2015 00:33:53##00:00:01#OK#gonzalo$668#terminator#I#0#24-10-2015 00:34:18#668#33#Economia_-_Copy.tiff#24-10-2015 00:34:18#2015/10/24/00/a97c405c-082f-41e7-93e2-648824a77c2f.bin#00:00:00#OK#gonzalo$595#terminator#D#0#24-10-2015 00:34:46#595#34#Alvas.Audio.dll#24-10-2015 00:34:46#2015/10/24/00/d5e2de57-d180-4d8b-8de8-a6f0f7d7a691.bin#00:00:00#OK#gonzalo$667#terminator#I#0#24-10-2015 00:35:11#667#35#Economia.gif#24-10-2015 00:35:11#2015/10/24/00/648c7b00-2ddc-4502-b7c9-c5d0655d9eea.bin#00:00:00#OK#gonzalo$673#terminator#V#96#24-10-2015 00:35:27#673#36#video_4096.mp4#24-10-2015 00:37:03#2015/10/24/00/dee40cc5-c5ee-4bc4-88ac-4b7d0c921c10.bin#00:01:36#OK#gonzalo$541#terminator#S#4#24-10-2015 00:35:43#541#37#backgr.mp4#24-10-2015 00:35:47##00:00:04#OK#gonzalo$613#terminator#V#85#24-10-2015 00:36:08#613#38#Himno-Nacional-Mexicano--Version-Instrumental-.mp4#24-10-2015 00:37:33#2015/10/24/00/24fe286e-7f4b-4256-9c1e-bcfa60de8036.bin#00:01:25#OK#gonzalo$656#terminator#V#103#24-10-2015 00:36:14#656#39#20160309_192548_WQVP-1.mp4#24-10-2015 00:37:57#2015/10/24/00/26c0a67a-5fc6-450c-9000-8e9f70dd9dc0.bin#00:01:43#OK#gonzalo$636#terminator#V#187#24-10-2015 00:36:16#636#40#MS1.mp4#24-10-2015 00:39:23#2015/10/24/00/09d59330-ad93-43b7-8510-70bca243f7f5.bin#00:03:07#OK#gonzalo$664#terminator#I#0#24-10-2015 00:36:18#664#41#1757-hdr-wallpaper-city-desktop-wallpaper-1920x1200.jpg#24-10-2015 00:36:18#2015/10/24/00/735cba52-8241-4c47-839c-68781ab7a5d3.bin#00:00:00#OK#gonzalo$637#terminator#I#0#24-10-2015 00:36:19#637#42#wallpapers (4).jpg#24-10-2015 00:36:19#2015/10/24/00/102060c0-552f-42b3-8c4e-12e5627d7057.bin#00:00:00#OK#gonzalo$635#terminator#V#4#24-10-2015 00:36:19#635#43#backgr.mp4#24-10-2015 00:36:23#2015/10/24/00/5e63b3ec-dd82-47d1-8b54-851136b2200e.bin#00:00:04#OK#gonzalo$663#terminator#I#0#24-10-2015 00:36:20#663#44#CSYJ_014017.jpg#24-10-2015 00:36:20#2015/10/24/00/8f45f77b-08a0-417b-b21a-fdecbeef644d.bin#00:00:00#OK#gonzalo$567#terminator#A#10#24-10-2015 00:37:16#567#45#Mi Mejor Tono De Msj_1.mp3#24-10-2015 00:37:26#2015/10/24/00/edaa2f1f-501a-4dbd-9bfd-ad6a82c4fbcf.bin#00:00:10#OK#gonzalo$623#terminator#A#162#24-10-2015 00:37:40#623#46#Capital.wav#24-10-2015 00:40:22#2015/10/24/00/8d9b410d-c434-47bd-8774-4d6ba53cc8f0.bin#00:02:42#OK#gonzalo$575#terminator#C#69#24-10-2015 00:39:06#575#47#Comentario, Video e Imágenes#24-10-2015 00:40:15##00:01:09#OK#gonzalo$572#terminator#V#187#24-10-2015 00:39:09#572#48#asdasdasd.avi#24-10-2015 00:42:16#2015/10/24/00/a797a069-3e24-4e10-a11f-9bfc94b6af24.bin#00:03:07#OK#gonzalo$573#terminator#I#0#24-10-2015 00:39:19#573#49#wallpapers (4).jpg#24-10-2015 00:39:19#2015/10/24/00/27da7632-11ef-4a53-b7fe-7a5d78e719b6.bin#00:00:00#OK#gonzalo$574#terminator#I#0#24-10-2015 00:39:40#574#50#wallpapers (1).jpg#24-10-2015 00:39:40#2015/10/24/00/ef59e9d4-577d-4aba-b415-14b37bf3a676.bin#00:00:00#OK#gonzalo$647#terminator#C#38#24-10-2015 00:40:43#647#51#38 segundos#24-10-2015 00:41:21##00:00:38#OK#gonzalo$603#terminator#I#0#24-10-2015 00:41:10#603#52#2013-01-17 00.02.03.png#24-10-2015 00:41:10#2015/10/24/00/1a9b65d1-f4e5-43bb-88a2-01ebaddeaa3b.bin#00:00:00#OK#gonzalo$660#terminator#C#1#24-10-2015 00:41:39#660#53#asdasd#24-10-2015 00:41:40##00:00:01#OK#gonzalo$678#terminator#C#15#24-10-2015 00:41:53#678#54#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa#24-10-2015 00:42:08##00:00:15#OK#gonzalo">
                    <input type="hidden" name="ctl00$ContentBody$_hdnJSonList" id="ctl00_ContentBody__hdnJSonList" value="{&quot;name&quot;:&quot;Elements&quot;,&quot;color&quot;:&quot;#000000&quot;,&quot;spans&quot;:[{&quot;name&quot;:&quot;I&quot;,&quot;start&quot;:&quot;24-10-2015 00:27:40&quot;,&quot;end&quot;:&quot;24-10-2015 00:27:40&quot;,&quot;id&quot;:&quot;627&quot;,&quot;type&quot;:&quot;I&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;C&quot;,&quot;start&quot;:&quot;24-10-2015 00:27:40&quot;,&quot;end&quot;:&quot;24-10-2015 00:27:41&quot;,&quot;id&quot;:&quot;641&quot;,&quot;type&quot;:&quot;C&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;C&quot;,&quot;start&quot;:&quot;24-10-2015 00:27:46&quot;,&quot;end&quot;:&quot;24-10-2015 00:27:47&quot;,&quot;id&quot;:&quot;621&quot;,&quot;type&quot;:&quot;C&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;D&quot;,&quot;start&quot;:&quot;24-10-2015 00:28:02&quot;,&quot;end&quot;:&quot;24-10-2015 00:28:02&quot;,&quot;id&quot;:&quot;666&quot;,&quot;type&quot;:&quot;D&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;D&quot;,&quot;start&quot;:&quot;24-10-2015 00:28:06&quot;,&quot;end&quot;:&quot;24-10-2015 00:28:06&quot;,&quot;id&quot;:&quot;665&quot;,&quot;type&quot;:&quot;D&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;D&quot;,&quot;start&quot;:&quot;24-10-2015 00:28:15&quot;,&quot;end&quot;:&quot;24-10-2015 00:28:15&quot;,&quot;id&quot;:&quot;615&quot;,&quot;type&quot;:&quot;D&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;C&quot;,&quot;start&quot;:&quot;24-10-2015 00:28:22&quot;,&quot;end&quot;:&quot;24-10-2015 00:28:23&quot;,&quot;id&quot;:&quot;644&quot;,&quot;type&quot;:&quot;C&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;V&quot;,&quot;start&quot;:&quot;24-10-2015 00:28:28&quot;,&quot;end&quot;:&quot;24-10-2015 00:29:45&quot;,&quot;id&quot;:&quot;617&quot;,&quot;type&quot;:&quot;V&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;I&quot;,&quot;start&quot;:&quot;24-10-2015 00:28:38&quot;,&quot;end&quot;:&quot;24-10-2015 00:28:38&quot;,&quot;id&quot;:&quot;630&quot;,&quot;type&quot;:&quot;I&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;I&quot;,&quot;start&quot;:&quot;24-10-2015 00:28:45&quot;,&quot;end&quot;:&quot;24-10-2015 00:28:45&quot;,&quot;id&quot;:&quot;628&quot;,&quot;type&quot;:&quot;I&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;I&quot;,&quot;start&quot;:&quot;24-10-2015 00:28:51&quot;,&quot;end&quot;:&quot;24-10-2015 00:28:51&quot;,&quot;id&quot;:&quot;629&quot;,&quot;type&quot;:&quot;I&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;I&quot;,&quot;start&quot;:&quot;24-10-2015 00:28:53&quot;,&quot;end&quot;:&quot;24-10-2015 00:28:53&quot;,&quot;id&quot;:&quot;632&quot;,&quot;type&quot;:&quot;I&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;C&quot;,&quot;start&quot;:&quot;24-10-2015 00:29:04&quot;,&quot;end&quot;:&quot;24-10-2015 00:29:31&quot;,&quot;id&quot;:&quot;646&quot;,&quot;type&quot;:&quot;C&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;I&quot;,&quot;start&quot;:&quot;24-10-2015 00:29:15&quot;,&quot;end&quot;:&quot;24-10-2015 00:29:15&quot;,&quot;id&quot;:&quot;634&quot;,&quot;type&quot;:&quot;I&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;I&quot;,&quot;start&quot;:&quot;24-10-2015 00:29:42&quot;,&quot;end&quot;:&quot;24-10-2015 00:29:42&quot;,&quot;id&quot;:&quot;679&quot;,&quot;type&quot;:&quot;I&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;C&quot;,&quot;start&quot;:&quot;24-10-2015 00:29:51&quot;,&quot;end&quot;:&quot;24-10-2015 00:29:52&quot;,&quot;id&quot;:&quot;639&quot;,&quot;type&quot;:&quot;C&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;C&quot;,&quot;start&quot;:&quot;24-10-2015 00:30:07&quot;,&quot;end&quot;:&quot;24-10-2015 00:30:28&quot;,&quot;id&quot;:&quot;649&quot;,&quot;type&quot;:&quot;C&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;I&quot;,&quot;start&quot;:&quot;24-10-2015 00:30:12&quot;,&quot;end&quot;:&quot;24-10-2015 00:30:12&quot;,&quot;id&quot;:&quot;650&quot;,&quot;type&quot;:&quot;I&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;I&quot;,&quot;start&quot;:&quot;24-10-2015 00:30:14&quot;,&quot;end&quot;:&quot;24-10-2015 00:30:14&quot;,&quot;id&quot;:&quot;658&quot;,&quot;type&quot;:&quot;I&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;C&quot;,&quot;start&quot;:&quot;24-10-2015 00:30:32&quot;,&quot;end&quot;:&quot;24-10-2015 00:30:54&quot;,&quot;id&quot;:&quot;677&quot;,&quot;type&quot;:&quot;C&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;V&quot;,&quot;start&quot;:&quot;24-10-2015 00:30:34&quot;,&quot;end&quot;:&quot;24-10-2015 00:30:38&quot;,&quot;id&quot;:&quot;661&quot;,&quot;type&quot;:&quot;V&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;C&quot;,&quot;start&quot;:&quot;24-10-2015 00:30:37&quot;,&quot;end&quot;:&quot;24-10-2015 00:31:08&quot;,&quot;id&quot;:&quot;655&quot;,&quot;type&quot;:&quot;C&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;A&quot;,&quot;start&quot;:&quot;24-10-2015 00:31:05&quot;,&quot;end&quot;:&quot;24-10-2015 00:31:49&quot;,&quot;id&quot;:&quot;618&quot;,&quot;type&quot;:&quot;A&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;C&quot;,&quot;start&quot;:&quot;24-10-2015 00:31:11&quot;,&quot;end&quot;:&quot;24-10-2015 00:31:12&quot;,&quot;id&quot;:&quot;633&quot;,&quot;type&quot;:&quot;C&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;C&quot;,&quot;start&quot;:&quot;24-10-2015 00:31:21&quot;,&quot;end&quot;:&quot;24-10-2015 00:31:22&quot;,&quot;id&quot;:&quot;674&quot;,&quot;type&quot;:&quot;C&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;A&quot;,&quot;start&quot;:&quot;24-10-2015 00:31:36&quot;,&quot;end&quot;:&quot;24-10-2015 00:33:35&quot;,&quot;id&quot;:&quot;619&quot;,&quot;type&quot;:&quot;A&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;C&quot;,&quot;start&quot;:&quot;24-10-2015 00:31:42&quot;,&quot;end&quot;:&quot;24-10-2015 00:32:39&quot;,&quot;id&quot;:&quot;648&quot;,&quot;type&quot;:&quot;C&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;P&quot;,&quot;start&quot;:&quot;24-10-2015 00:32:00&quot;,&quot;end&quot;:&quot;24-10-2015 00:33:08&quot;,&quot;id&quot;:&quot;84&quot;,&quot;type&quot;:&quot;S&quot;,&quot;role&quot;:&quot;&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;C&quot;,&quot;start&quot;:&quot;24-10-2015 00:33:19&quot;,&quot;end&quot;:&quot;24-10-2015 00:33:40&quot;,&quot;id&quot;:&quot;675&quot;,&quot;type&quot;:&quot;C&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;C&quot;,&quot;start&quot;:&quot;24-10-2015 00:33:28&quot;,&quot;end&quot;:&quot;24-10-2015 00:38:17&quot;,&quot;id&quot;:&quot;645&quot;,&quot;type&quot;:&quot;C&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;C&quot;,&quot;start&quot;:&quot;24-10-2015 00:33:41&quot;,&quot;end&quot;:&quot;24-10-2015 00:34:07&quot;,&quot;id&quot;:&quot;654&quot;,&quot;type&quot;:&quot;C&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;C&quot;,&quot;start&quot;:&quot;24-10-2015 00:33:52&quot;,&quot;end&quot;:&quot;24-10-2015 00:33:53&quot;,&quot;id&quot;:&quot;676&quot;,&quot;type&quot;:&quot;C&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;I&quot;,&quot;start&quot;:&quot;24-10-2015 00:34:18&quot;,&quot;end&quot;:&quot;24-10-2015 00:34:18&quot;,&quot;id&quot;:&quot;668&quot;,&quot;type&quot;:&quot;I&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;D&quot;,&quot;start&quot;:&quot;24-10-2015 00:34:46&quot;,&quot;end&quot;:&quot;24-10-2015 00:34:46&quot;,&quot;id&quot;:&quot;595&quot;,&quot;type&quot;:&quot;D&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;I&quot;,&quot;start&quot;:&quot;24-10-2015 00:35:11&quot;,&quot;end&quot;:&quot;24-10-2015 00:35:11&quot;,&quot;id&quot;:&quot;667&quot;,&quot;type&quot;:&quot;I&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;V&quot;,&quot;start&quot;:&quot;24-10-2015 00:35:27&quot;,&quot;end&quot;:&quot;24-10-2015 00:37:03&quot;,&quot;id&quot;:&quot;673&quot;,&quot;type&quot;:&quot;V&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;P&quot;,&quot;start&quot;:&quot;24-10-2015 00:35:43&quot;,&quot;end&quot;:&quot;24-10-2015 00:35:47&quot;,&quot;id&quot;:&quot;541&quot;,&quot;type&quot;:&quot;S&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;V&quot;,&quot;start&quot;:&quot;24-10-2015 00:36:08&quot;,&quot;end&quot;:&quot;24-10-2015 00:37:33&quot;,&quot;id&quot;:&quot;613&quot;,&quot;type&quot;:&quot;V&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;V&quot;,&quot;start&quot;:&quot;24-10-2015 00:36:14&quot;,&quot;end&quot;:&quot;24-10-2015 00:37:57&quot;,&quot;id&quot;:&quot;656&quot;,&quot;type&quot;:&quot;V&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;V&quot;,&quot;start&quot;:&quot;24-10-2015 00:36:16&quot;,&quot;end&quot;:&quot;24-10-2015 00:39:23&quot;,&quot;id&quot;:&quot;636&quot;,&quot;type&quot;:&quot;V&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;I&quot;,&quot;start&quot;:&quot;24-10-2015 00:36:18&quot;,&quot;end&quot;:&quot;24-10-2015 00:36:18&quot;,&quot;id&quot;:&quot;664&quot;,&quot;type&quot;:&quot;I&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;I&quot;,&quot;start&quot;:&quot;24-10-2015 00:36:19&quot;,&quot;end&quot;:&quot;24-10-2015 00:36:19&quot;,&quot;id&quot;:&quot;637&quot;,&quot;type&quot;:&quot;I&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;V&quot;,&quot;start&quot;:&quot;24-10-2015 00:36:19&quot;,&quot;end&quot;:&quot;24-10-2015 00:36:23&quot;,&quot;id&quot;:&quot;635&quot;,&quot;type&quot;:&quot;V&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;I&quot;,&quot;start&quot;:&quot;24-10-2015 00:36:20&quot;,&quot;end&quot;:&quot;24-10-2015 00:36:20&quot;,&quot;id&quot;:&quot;663&quot;,&quot;type&quot;:&quot;I&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;A&quot;,&quot;start&quot;:&quot;24-10-2015 00:37:16&quot;,&quot;end&quot;:&quot;24-10-2015 00:37:26&quot;,&quot;id&quot;:&quot;567&quot;,&quot;type&quot;:&quot;A&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;A&quot;,&quot;start&quot;:&quot;24-10-2015 00:37:40&quot;,&quot;end&quot;:&quot;24-10-2015 00:40:22&quot;,&quot;id&quot;:&quot;623&quot;,&quot;type&quot;:&quot;A&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;C&quot;,&quot;start&quot;:&quot;24-10-2015 00:39:06&quot;,&quot;end&quot;:&quot;24-10-2015 00:40:15&quot;,&quot;id&quot;:&quot;575&quot;,&quot;type&quot;:&quot;C&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;V&quot;,&quot;start&quot;:&quot;24-10-2015 00:39:09&quot;,&quot;end&quot;:&quot;24-10-2015 00:42:16&quot;,&quot;id&quot;:&quot;572&quot;,&quot;type&quot;:&quot;V&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;I&quot;,&quot;start&quot;:&quot;24-10-2015 00:39:19&quot;,&quot;end&quot;:&quot;24-10-2015 00:39:19&quot;,&quot;id&quot;:&quot;573&quot;,&quot;type&quot;:&quot;I&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;I&quot;,&quot;start&quot;:&quot;24-10-2015 00:39:40&quot;,&quot;end&quot;:&quot;24-10-2015 00:39:40&quot;,&quot;id&quot;:&quot;574&quot;,&quot;type&quot;:&quot;I&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;C&quot;,&quot;start&quot;:&quot;24-10-2015 00:40:43&quot;,&quot;end&quot;:&quot;24-10-2015 00:41:21&quot;,&quot;id&quot;:&quot;647&quot;,&quot;type&quot;:&quot;C&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;I&quot;,&quot;start&quot;:&quot;24-10-2015 00:41:10&quot;,&quot;end&quot;:&quot;24-10-2015 00:41:10&quot;,&quot;id&quot;:&quot;603&quot;,&quot;type&quot;:&quot;I&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;C&quot;,&quot;start&quot;:&quot;24-10-2015 00:41:39&quot;,&quot;end&quot;:&quot;24-10-2015 00:41:40&quot;,&quot;id&quot;:&quot;660&quot;,&quot;type&quot;:&quot;C&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null},{&quot;name&quot;:&quot;C&quot;,&quot;start&quot;:&quot;24-10-2015 00:41:53&quot;,&quot;end&quot;:&quot;24-10-2015 00:42:08&quot;,&quot;id&quot;:&quot;678&quot;,&quot;type&quot;:&quot;C&quot;,&quot;role&quot;:&quot;terminator&quot;,&quot;localParty&quot;:null,&quot;userName&quot;:null,&quot;duration&quot;:null}]}">
                    <input type="hidden" name="ctl00$ContentBody$_hdnJSonStart" id="ctl00_ContentBody__hdnJSonStart" value="24-10-2015 00:27:40">
                    <input type="hidden" name="ctl00$ContentBody$_hdnJSonEnd" id="ctl00_ContentBody__hdnJSonEnd" value="24-10-2015 00:42:16">
                    <input type="hidden" name="ctl00$ContentBody$_hdnFolioID" id="ctl00_ContentBody__hdnFolioID" value="1234567890">


                    string val1 = JsonConvert.SerializeObject(json_elementList);
                    string val2 = folio_start.ToString("dd'-'MM'-'yyyy HH':'mm':'ss");

                    _hdnJSonList.Value = val1;
                    _hdnJSonStart.Value = val2;

                    */

                    if (tr_nodes_toDownload != null && tr_nodes_toDownload.Count > 0)
                    {
                        HtmlNode tr_node_parent = html_doc_Table.DocumentNode.SelectSingleNode("//tbody");
                        if (tr_node_parent != null)
                        {
                            tr_node_parent.RemoveAllChildren();
                            tr_node_parent.AppendChildren(tr_nodes_toDownload);
                        }

                        // Remove all checkboxes from table of elements
                        var remove_list = tr_node_parent.SelectNodes("//input[@type='checkbox']").ToList();
                        if (remove_list != null && remove_list.Count > 0)
                        {
                            foreach (var checkbox in remove_list)
                            {
                                checkbox.Remove();
                            }
                        }

                        /* ************** */

                        // Create document
                        HtmlDocument html_doc = new HtmlDocument();
                        html_doc.LoadHtml(html_str);

                        // Create table node
                        //HtmlNode table_node = HtmlNode.CreateNode(dynamic_table);
                        HtmlNode table_node = HtmlNode.CreateNode(html_doc_Table.DocumentNode.OuterHtml);

                        // Get container div
                        HtmlNode divElementos_node = html_doc.DocumentNode.SelectSingleNode("//div[@id='" + id_str + "']");
                        if (divElementos_node != null)
                        {
                            divElementos_node.AppendChild(table_node);
                        }

                        // Convert to string
                        html_str = html_doc.DocumentNode.OuterHtml;

                        Download_ZipFiles(html_str);
                    }
                }
            }
        }

        protected void Download_ZipFiles(string html_str)
        {
            // Revisar
            // http://dotnetzip.codeplex.com/discussions/231933
            // http://dotnetzip.codeplex.com/discussions/234342

            if (!string.IsNullOrWhiteSpace(html_str))
            {
                // #1- Logger variables
                System.Diagnostics.StackFrame stackFrame = new System.Diagnostics.StackFrame();
                string className = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
                string methodName = stackFrame.GetMethod().Name;

                string folioID = string.Empty;
                if (ViewState["FolioID"] != null)
                {
                    folioID = ViewState["FolioID"].ToString();
                }
                string zipName = String.Format("MP_portable{0}.zip", folioID);

                // Get Repository temp path
                string repository_temp = string.Empty;
                if (ConfigurationManager.AppSettings != null)
                {
                    repository_temp = ConfigurationManager.AppSettings["LocalTempPath"].ToString();
                }

                // Get Client file name
                string client_fileName = string.Empty;
                if (ConfigurationManager.AppSettings != null)
                {
                    client_fileName = ConfigurationManager.AppSettings["Download_ClientName"].ToString();
                }

                // Get Client file name exe
                string client_fileName_exe = string.Empty;
                if (ConfigurationManager.AppSettings != null)
                {
                    client_fileName_exe = ConfigurationManager.AppSettings["Download_ClientName_exe"].ToString();
                }

                // Zip Source: http://www.aspsnippets.com/Articles/Download-multiple-files-as-Zip-Archive-File-in-ASPNet-using-C-and-VBNet.aspx

                using (ZipFile zip = new ZipFile())
                {
                    zip.AlternateEncodingUsage = ZipOption.AsNecessary;
                    string temp_file = Path.Combine(repository_temp, client_fileName);

                    /* ******************** HTML File ******************** */

                    // Check if directory exists, if not creates it
                    if (!Directory.Exists(Path.GetDirectoryName(repository_temp)))
                    {
                        Directory.CreateDirectory(Path.GetDirectoryName(repository_temp));
                    }

                    StringBuilder sb = new StringBuilder();
                    sb.Append(html_str);
                    sb.Append("\r\n");
                    File.WriteAllText(temp_file, sb.ToString());

                    // Ensure that the temp file is already created before generate the zip file
                    Thread.Sleep(300);

                    /* ******************** Directories Files ******************** */

                    Directory.SetCurrentDirectory(AppDomain.CurrentDomain.BaseDirectory);
                    string folder_path_1 = Path.Combine(Directory.GetCurrentDirectory(), @"MP_client\files");
                    string folder_path_2 = Path.Combine(Directory.GetCurrentDirectory(), @"MP_client\fonts");
                    string folder_path_3 = Path.Combine(Directory.GetCurrentDirectory(), @"MP_client\image");
                    string folder_path_4 = Path.Combine(Directory.GetCurrentDirectory(), @"MP_client\images");

                    /* -Self-Extractor--------------------------------------------------
                        //zip.SaveSelfExtractor(Path.Combine(repository_temp, "archive.exe"), SelfExtractorFlavor.ConsoleApplication);
                    */

                    Response.Clear();
                    Response.BufferOutput = false;
                    Response.ContentType = "application/zip";
                    Response.AddHeader("content-disposition", "attachment; filename=" + zipName);

                    /* -Self-Extractor--------------------------------------------------
                    Response.AddHeader("Content-Disposition", "attachment; filename=" + client_fileName_exe);
                    Response.AddHeader("Content-Description", "File Transfer");
                    Response.AddHeader("Content-Transfer-Encoding", "binary");
                    Response.ContentType = "application/exe";
                    */

                    // Add folders directories
                    zip.AddDirectory(folder_path_1, Path.GetFileName(folder_path_1));
                    zip.AddDirectory(folder_path_2, Path.GetFileName(folder_path_2));
                    zip.AddDirectory(folder_path_3, Path.GetFileName(folder_path_3));
                    zip.AddDirectory(folder_path_4, Path.GetFileName(folder_path_4));

                    zip.AddFile(temp_file, "");

                    zip.Save(Response.OutputStream);

                    // Ensure that the zip file is already downloaded before cleaning temp files
                    Thread.Sleep(300);

                    /* ******************** Clear temporary HTML file ******************** */

                    // Clearing temporary HTML file
                    try
                    {
                        // Check if directory exists
                        if (Directory.Exists(Path.GetDirectoryName(repository_temp)) && File.Exists(temp_file))
                        {
                            File.Delete(temp_file);
                        }
                    }
                    catch (Exception ex)
                    {
                        // #2- Logger exception
                        Logger.LogError("(%s) (%s) -- Excepcion. Limpiando archivo HTML temporal. ERROR: %s", className, methodName, ex.Message);
                    }

                    // Close thread
                    Response.End();

                    /* -Self-Extractor--------------------------------------------------
                    int fileSize = 99999999;
                    byte[] Buffer = new byte[fileSize];

                    FileStream MyFileStream = new FileStream(Path.Combine(repository_temp, "archive.exe"), FileMode.Open);
                    long FileSize = MyFileStream.Length;

                    MyFileStream.Read(Buffer, 0, int.Parse(FileSize.ToString()));
                    MyFileStream.Close();

                    Response.ContentType = "application/exe";
                    Response.AddHeader("Content-Disposition", "attachment; filename=archive.exe");
                    Response.OutputStream.Write(Buffer, 0, fileSize);
                    Response.Flush();
                    Response.Close();
                    */
                }
            }
        }


        private string GetTable_download()
        {
            int index = 0;
            StringBuilder htmlTable = new StringBuilder();

            /****** Table headers ******/

            htmlTable.AppendLine("<table class='table unselectable' id='tblLeftGridElements'>"); // style='display:none;'
            htmlTable.AppendLine("<thead>");
            htmlTable.AppendLine("<tr style='background: #446e9b; color: whitesmoke;'>");
            htmlTable.AppendLine("<th width='3%' style='text-align: center;'><input type='checkbox' id='chbSelectAll' name='timeline_elements_checkAll' class='button' checked></th>");
            htmlTable.AppendLine("<th width='3%' style='text-align: center;'>#</th>");
            htmlTable.AppendLine("<th width='5%' style='text-align: center;'>Usuario</th>");
            htmlTable.AppendLine("<th width='8%' style='text-align: center;'>Local Party</th>");
            htmlTable.AppendLine("<th width='5%' style='text-align: center;'>Remote Party</th>");
            htmlTable.AppendLine("<th width='5%' style='text-align: center;'>Tipo</th>");
            htmlTable.AppendLine("<th width='6%' style='text-align: center;'>Inicio</th>");
            htmlTable.AppendLine("<th width='3%' style='text-align: center;'>Duración</th>");
            htmlTable.AppendLine("</tr>");
            htmlTable.AppendLine("</thead>");
            htmlTable.AppendLine("<tbody>");

            if (!string.IsNullOrWhiteSpace(txbSearchBox1.Text))
            {
                this.folio_list = Global.GlobalMethods.GetAllFolios(txbSearchBox1.Text);

                if (this.folio_list != null && this.folio_list.Count > 0)
                {
                    this.folio_filteredList = this.folio_list.FindAll(x => x.deleted == 0);

                    /*
                    string hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName = string.Empty;
                    string hdnElementsIDChecked = string.Empty;
                    */

                    // Json object
                    RootObject json_elementList = new RootObject();
                    json_elementList.name = "Elements";
                    json_elementList.color = "#000000";

                    DateTime folio_start = DateTime.MaxValue;
                    DateTime folio_end = DateTime.MinValue;
                    //

                    List<Folio> list = this.folio_filteredList.Where(x => x.deleted == 0).ToList();
                    if (list != null && list.Count > 0)
                    {
                        foreach (Folio folio in list)
                        {
                            index++;

                            string end_date = folio.timestamp.AddSeconds(folio.duration).ToString("dd'-'MM'-'yyyy HH':'mm':'ss");

                            // Duration
                            TimeSpan time = TimeSpan.FromSeconds(folio.duration);
                            string duration_formatStr = time.ToString(@"hh\:mm\:ss");

                            /*
                            /****** Hidden fields ****** /
                            hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName
                                += folio.tapeID + "#" + folio.groupName + "#" + folio.mediaType.ToString() + "#" + folio.duration + "#" + folio.timestamp.ToString("dd'-'MM'-'yyyy HH':'mm':'ss")
                                + "#" + folio.segmentID + "#" + index + "#" + folio.fileName + "#" + end_date + "#" + folio.filePath + "#" + duration_formatStr + "#" + folio.fileStatus + "#" + folio.userName + "$";
                            */

                            // Get max and min value
                            folio_start = folio_start > folio.timestamp ? folio.timestamp : folio_start;
                            folio_end = folio_end < folio.timestamp.AddSeconds(folio.duration) ? folio.timestamp.AddSeconds(folio.duration) : folio_end;

                            /****** Create json data ******/
                            Span json_element = new Span();
                            json_element.name = folio.mediaType == "S" ? "P" : folio.mediaType;
                            json_element.start = folio.timestamp.ToString("dd'-'MM'-'yyyy HH':'mm':'ss");
                            json_element.end = end_date;
                            json_element.id = folio.tapeID.ToString();
                            json_element.type = folio.mediaType;
                            json_element.role = folio.groupName;

                            json_elementList.spans.Add(json_element);

                            // isExtra, type, icon and color
                            //bool isExtra = false; // If its taken from orkextra table
                            string icon = "glyphicon glyphicon-headphones";
                            string media_str = "Grabación";
                            string color_str = "";
                            switch (folio.mediaType)
                            {
                                case "S":
                                    {
                                        icon = "fa fa-video-camera";
                                        media_str = "Grabación";
                                        color_str = "blue";
                                        break;
                                    }
                                case "V":
                                    {
                                        icon = "glyphicon glyphicon-film";
                                        media_str = "Video";
                                        color_str = "purple";
                                        break;
                                    }
                                case "A":
                                    {
                                        icon = "glyphicon glyphicon-headphones";
                                        media_str = "Audio";
                                        color_str = "red";
                                        break;
                                    }
                                case "D":
                                    {
                                        icon = "fa fa-file-text";
                                        media_str = "Documento";
                                        color_str = "green";
                                        break;
                                    }
                                case "C":
                                    {
                                        icon = "glyphicon glyphicon-comment";
                                        media_str = "Comentario";
                                        color_str = "orange";
                                        break;
                                    }
                                case "I":
                                    {
                                        icon = "glyphicon glyphicon-picture";
                                        media_str = "Imagen";
                                        color_str = "Violet";
                                        break;
                                    }
                            }

                            // IsExtra = If filePath is NOT empty, then is extra from incextras table
                            bool isExtra = folio.filePath == string.Empty ? false : true;
                            if (folio.mediaType == "C")
                            {
                                isExtra = true;
                            }

                            string color_icon = "beige";
                            string tr_color = isExtra ? "inherit" : "#D1E2F3";
                            string tr_name = isExtra ? "Extra" : "Oreka";

                            // Onclick event
                            string onclick_event = FolioElements_GetOnClickEvent(folio, index, isExtra, duration_formatStr, media_str);

                            // Title
                            string title = folio.mediaType == "S" ? "Grabación de Pantalla" : media_str;

                            /****** Table data ******/
                            htmlTable.AppendLine("<tr id='tape_" + folio.tapeID + "' style='background-color: " + tr_color + ";' name='" + tr_name + "'>");
                            htmlTable.AppendLine("<td>");

                            htmlTable.AppendLine("<input type='checkbox' name='timeline_elements' class='button' value='" + folio.tapeID + "#" + isExtra.ToString().ToLowerInvariant() + "#" + folio.mediaType + "#" + folio.fileName + "' onclick='manageElement(this, " + folio.tapeID + ", " + (index - 1).ToString() + ", " + JsonConvert.SerializeObject(json_element) + ")' checked>");
                            htmlTable.AppendLine("<td>");
                            htmlTable.AppendLine("<h5>" + index + "</h5>");
                            htmlTable.AppendLine("<td>");
                            htmlTable.AppendLine("<h5>" + folio.userName + "</h5>");
                            htmlTable.AppendLine("<td>");
                            htmlTable.AppendLine("<h5>" + folio.localParty + "</h5>");
                            htmlTable.AppendLine("<td>");
                            htmlTable.AppendLine("<h5>" + folio.remoteParty + "</h5>");
                            htmlTable.AppendLine("<td>");

                            htmlTable.AppendLine("<button type='button' class='btn btn-default btn-sm' style='color:" + color_str + "; opacity: 0.9; background-color: " + color_icon + "; background-image: none;' name='btnTimelineElement' data-toggle='tooltip' ");
                            htmlTable.AppendLine("title=" + title + " onclick='" + onclick_event + "'><span class='" + icon + "' aria-hidden='true'></span></button>");
                            htmlTable.AppendLine("<td>");
                            htmlTable.AppendLine("<h5 id='timestamp'>" + folio.timestamp.ToString("dd'-'MM'-'yyyy HH':'mm':'ss") + "</h5>");
                            htmlTable.AppendLine("<td>");

                            htmlTable.AppendLine("<h5>" + duration_formatStr + "</h5>");
                            htmlTable.AppendLine("</tr>");
                        }
                    }

                    /*
                    if (hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName.Length > 0)
                    {
                        hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName = hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName.Remove(hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName.Length - 1);
                        _hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName.Value = hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName;
                    }

                    ****** Load bottom Timeline ****** /
                    string val1 = JsonConvert.SerializeObject(json_elementList);
                    string val2 = folio_start.ToString("dd'-'MM'-'yyyy HH':'mm':'ss");
                    string val3 = folio_end.ToString("dd'-'MM'-'yyyy HH':'mm':'ss");

                    _hdnJSonList.Value = val1;
                    _hdnJSonStart.Value = val2;
                    _hdnJSonEnd.Value = val3;

                    // Fire the timeframe drawing
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "pre_timeframe_prepare", "pre_timeframe_prepare();", true);
                    */
                }
                else
                {
                    /*
                    // Folio does not exist
                    ViewState["FolioID"] = "0";
                    _hdnJSonEnd.Value = "0";

                    _hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName.Value = string.Empty;
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "clear_timeline", "clear_timeline();", true);
                    */
                }
            }
            else
            {
                /*
                // Empty Folio search textbox
                ViewState["FolioID"] = "0";
                _hdnJSonEnd.Value = "0";

                _hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName.Value = string.Empty;
                ScriptManager.RegisterStartupScript(this, typeof(Page), "clear_timeline", "clear_timeline();", true);
                */
            }
            htmlTable.AppendLine("</tbody>");
            htmlTable.AppendLine("</table>");

            /*
            // Change Roles and Types filter checkboxes to checked status
            ScriptManager.RegisterStartupScript(this, typeof(Page), "checkRolesAndTypesFilters", "checkRolesAndTypesFilters();", true);
            */

            return htmlTable.ToString();
        }

        private void Download_HTML(string _html)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append(_html);
            sb.Append("\r\n");

            string text = sb.ToString();

            Response.Clear();
            Response.ClearHeaders();

            Response.AddHeader("Content-Length", text.Length.ToString());
            Response.ContentType = "text/plain";
            Response.AppendHeader("content-disposition", "attachment;filename=\"MP_client.html\"");

            Response.Write(text);
            Response.End();
        }

        #endregion Private Methods

        #region Static Methods

        public static double Convert100NanosecondsToMilliseconds(double nanoseconds)
        {
            // One million nanoseconds in 1 millisecond,
            // but we are passing in 100ns units...
            return nanoseconds * 0.0001;
        }

        private static string GetMediaTypeName(Folio folio)
        {
            string media_str = "Grabación";
            if (folio != null && !string.IsNullOrWhiteSpace(media_str))
            {
                switch (folio.mediaType)
                {
                    case "S":
                        {
                            media_str = "Grabación";
                            break;
                        }
                    case "A":
                        {
                            media_str = "Audio";
                            break;
                        }
                    case "V":
                        {
                            media_str = "Video";
                            break;
                        }
                    case "D":
                        {
                            media_str = "Documento";
                            break;
                        }
                    case "C":
                        {
                            media_str = "Comentario";
                            break;
                        }
                    case "I":
                        {
                            media_str = "Imagen";
                            break;
                        }
                }
            }
            return media_str;
        }

        #endregion Static Methods

        #region Web Methods

        [System.Web.Services.WebMethod]
        public static string AddFolioComment(string userID, string folioID, string comment, string date, string duration)
        {
            Span json_element = null;
            if (!string.IsNullOrWhiteSpace(userID) && !string.IsNullOrWhiteSpace(folioID) && !string.IsNullOrWhiteSpace(comment) && !string.IsNullOrWhiteSpace(date) && !string.IsNullOrWhiteSpace(duration))
            {
                // #1- Logger variables
                System.Diagnostics.StackFrame stackFrame = new System.Diagnostics.StackFrame();
                string className = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
                string methodName = stackFrame.GetMethod().Name;

                // #1-2- Params register
                Logger.LogDebug("(%s) (%s) -- Info WebMethod. Testing AddFolioComment", className, methodName);
                Logger.LogDebug("(%s) (%s) -- Info WebMethod. Parametros recibidos: " + userID + ", " + folioID + ", " + comment + ", " + date + ", " + duration, className, methodName);

                int duration_int = 0;
                if (!int.TryParse(duration, out duration_int))
                {
                    duration_int = 0;

                    // #2- Logger exception
                    Logger.LogError("(%s) (%s) -- Excepcion. Convirtiendo a int.", className, methodName);
                    Logger.LogError("(%s) (%s) -- Dato: " + duration, className, methodName);
                }

                string date_final_start = date;
                string date_final_end = date;
                DateTime date_2 = DateTime.Now;
                Logger.LogDebug("(%s) (%s) -- Intentando convertir a datetime. Formato: dd-MM-yyyy HH:mm:ss. Dato: " + date.ToString(), className, methodName);
                if (!DateTime.TryParseExact(date, "dd-MM-yyyy HH:mm:ss", null, System.Globalization.DateTimeStyles.None, out date_2))
                {
                    date_final_start = date_final_end = date;

                    // #2- Logger exception
                    Logger.LogError("(%s) (%s) -- Excepcion. Convirtiendo a datetime.", className, methodName);
                    Logger.LogError("(%s) (%s) -- Dato: " + date, className, methodName);
                }
                else
                {
                    date_final_start = date_2.ToString("dd'-'MM'-'yyyy HH':'mm':'ss");
                    date_final_end = date_2.AddSeconds(duration_int).ToString("dd'-'MM'-'yyyy HH':'mm':'ss");
                }
                Logger.LogDebug("(%s) (%s) -- Datetime date_final_start: " + date_final_start, className, methodName);
                Logger.LogDebug("(%s) (%s) -- Datetime date_final_end: " + date_final_end, className, methodName);

                // Save in DB
                int elementID = Global.GlobalMethods.AddFolioComment(userID, folioID, comment, date_2, duration_int);

                /****** Create json data ******/
                json_element = new Span();
                json_element.name = comment;
                json_element.start = date_final_start;
                json_element.end = date_final_end;
                json_element.id = elementID.ToString();
                json_element.type = "C";
                json_element.duration = duration; // new
                json_element.role = string.Empty;
            }
            return JsonConvert.SerializeObject(json_element);
        }

        [System.Web.Services.WebMethod]
        public static bool RemoveElement(int tapeID, bool isExtra)
        {
            // #1- Logger variables
            System.Diagnostics.StackFrame stackFrame = new System.Diagnostics.StackFrame();
            string className = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
            string methodName = stackFrame.GetMethod().Name;

            // #1-2- Params register
            Logger.LogDebug("(%s) (%s) -- Info WebMethod. Parametros recibidos: " + tapeID.ToString() + ", " + isExtra.ToString(), className, methodName);

            return tapeID > 0 ? Global.GlobalMethods.RemoveTimelineElement(tapeID, isExtra) : false;
        }

        [System.Web.Services.WebMethod]
        public static bool RemoveElementSelected(string list_elements)
        {
            bool ret = false;
            if (!string.IsNullOrWhiteSpace(list_elements))
            {
                // #1- Logger variables
                System.Diagnostics.StackFrame stackFrame = new System.Diagnostics.StackFrame();
                string className = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
                string methodName = stackFrame.GetMethod().Name;

                string[] element_array = list_elements.Split(',');
                if (element_array.Length > 0)
                {
                    foreach (string element in element_array)
                    {
                        string[] attributes_array = element.Split('#');
                        if (attributes_array.Length > 1)
                        {
                            string tapeID_str = attributes_array[0];
                            string isExtra_str = attributes_array[1];

                            bool isExtra = false;
                            if (!bool.TryParse(isExtra_str, out isExtra))
                            {
                                isExtra = false;

                                // #2- Logger exception
                                Logger.LogError("(%s) (%s) -- Excepcion. Convirtiendo a boolean.", className, methodName);
                                Logger.LogError("(%s) (%s) -- Dato: " + isExtra_str, className, methodName);
                            }

                            int tapeID_int = 0;
                            if (!int.TryParse(tapeID_str, out tapeID_int))
                            {
                                tapeID_int = 0;

                                // #2- Logger exception
                                Logger.LogError("(%s) (%s) -- Excepcion. Convirtiendo a int.", className, methodName);
                                Logger.LogError("(%s) (%s) -- Dato: " + tapeID_str, className, methodName);
                            }
                            if (tapeID_int > 0)
                            {
                                ret = Global.GlobalMethods.RemoveTimelineElement(tapeID_int, isExtra);
                            }
                        }
                    } //foreach
                }
            }
            return ret;

            // Source: http://stackoverflow.com/questions/12895913/what-is-the-simplest-way-to-pass-javascript-object-to-asp-net-codebehind-method
        }

        [System.Web.Services.WebMethod]
        public static int ConfirmRemoveElement(string userID, string password_input, int tapeID, bool isExtra)
        {
            int result = 0;
            /* 0 - Invalid password
             * 1 - OK
             * 2 - DB Error
             * */
            if (!string.IsNullOrWhiteSpace(userID) && !string.IsNullOrWhiteSpace(password_input))
            {
                // #1- Logger variables
                System.Diagnostics.StackFrame stackFrame = new System.Diagnostics.StackFrame();
                string className = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
                string methodName = stackFrame.GetMethod().Name;

                // #1-2- Params register
                Logger.LogDebug("(%s) (%s) -- Info WebMethod. Parametros recibidos: " + userID + ", " + password_input + ", " + tapeID.ToString() + ", " + isExtra.ToString(), className, methodName);

                User user = new User(userID, "");
                if (user != null)
                {
                    string uID = Global.GlobalMethods.CheckLogin(user.userName, password_input);
                    {
                        if (!string.IsNullOrWhiteSpace(uID))
                        {
                            result = 1; // OK
                        }
                    }
                }

                if (result == 1)
                {
                    result = Global.GlobalMethods.RemoveTimelineElement(tapeID, isExtra) ? 1 : 2;
                }
            }
            return result;
        }

        #endregion Web Methods
    }
}