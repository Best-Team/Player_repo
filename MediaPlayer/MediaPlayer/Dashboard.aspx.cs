using HtmlAgilityPack;
using Ionic.Zip;
using MediaPlayer.Domain;
using MediaPlayer.Extras;
using MediaPlayer.Global;
using Microsoft.WindowsAPICodePack.Shell;
using NAudio.Wave;
using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Resources;
using System.ServiceModel;
using System.Text;
using System.Threading;
using System.Web;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;

namespace MediaPlayer
{
    public partial class Dashboard : System.Web.UI.Page
    {
        private bool _signalSearchFolioElements = false;
        private string _argSearchFolioElements = null;
        private bool? _isPostbackExpected = null;
        private string build_date;

        #region Properties

        private List<Folio> folio_list;

        private List<Folio> folio_filteredList;

        public string Build_date { get { return build_date; } }

        private bool IsPostbackExpected
        {
            get
            {
                //only check expected postback when the request is actually a postback
                if (!Page.IsPostBack) return false;

                if (!_isPostbackExpected.HasValue)
                {
                    //compare server & client timestamps, if they don't match the postback was generated by a refresh.
                    _isPostbackExpected = ViewState["RequestTimestamp"].ToString() == Session["RequestTimestamp"].ToString();
                }
                return _isPostbackExpected.Value;
            }
        }

        #endregion Properties

        #region Events

        // Source: http://forums.asp.net/t/931180.aspx?Grab+resulting+HTML+from+aspx+page+and+save+to+file+or+put+in+email+

        protected override void Render(HtmlTextWriter writer)
        {
            StringBuilder sbOut = new StringBuilder();
            StringWriter swOut = new StringWriter(sbOut);
            HtmlTextWriter htwOut = new HtmlTextWriter(swOut);
            base.Render(htwOut);
            string sOut = sbOut.ToString();

            // Send sOut as an Email

            writer.Write(sOut);
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            string qs_folio = Request.QueryString["folioID"];
            string qs_loginToken = Request.QueryString["loginToken"];

            if (Session["UserID"] != null && Session["UserName"] != null)
            {
                if (!IsPostBack)
                {
                    build_date = GetLinkerTime(Assembly.GetExecutingAssembly()).ToString();

                    string search = string.Empty;
                    if (!string.IsNullOrWhiteSpace(qs_folio))
                    {
                        search = qs_folio;
                        txbSearchBox1.Text = qs_folio;
                    }

                    SearchFolioElements(search);
                    LoadConfigurationValues();
                }
                else
                {
                    // Get saved folio
                    this.folio_list = (ViewState["folio_list"] != null) ? ViewState["folio_list"] as List<Folio> : this.folio_list;
                    if (HttpContext.Current.Session["folio_filteredList"] != null) // Has priority
                    {
                        this.folio_filteredList = HttpContext.Current.Session["folio_filteredList"] as List<Folio>;
                    }
                    else
                    {
                        this.folio_filteredList = (ViewState["folio_filteredList"] != null) ? ViewState["folio_filteredList"] as List<Folio> : this.folio_filteredList;
                    }

                    if (_hdnIsUpdateNeeded.Value == "true")
                    {
                        SearchFolioElements();
                    }
                }

                // Load Element Roles
                LoadRoles();

                // Load Element Types
                LoadTypes();
            }
            else
            {
                string returnURL = !string.IsNullOrWhiteSpace(qs_folio) ? "Login.aspx?folioID=" + qs_folio : "Login.aspx";
                if (!string.IsNullOrWhiteSpace(qs_loginToken))
                {
                    returnURL += "&loginToken=" + qs_loginToken;
                }
                Response.Redirect(returnURL);
            }
        }

        protected void Page_LoadComplete(object sender, EventArgs e)
        {
            if (_signalSearchFolioElements)
            {
                DoSearchFolioElements(_argSearchFolioElements);
            }
        }

        protected void Page_PreRender(object sender, EventArgs e)
        {
            Session["RequestTimestamp"] = DateTime.Now.Ticks.ToString();
            ViewState["RequestTimestamp"] = Session["RequestTimestamp"].ToString();
        }

        protected void btnDownload_Click(object sender, EventArgs e)
        {
            Response.Redirect("Extras/DownloadFile.ashx?fileName=fileName");
        }

        protected void btn_close_ServerClick(object sender, EventArgs e)
        {
            Logout();
        }

        protected void btnSearch_ServerClick(object sender, EventArgs e)
        {
            SearchFolioElements();
        }

        protected void btnConfirmUploadElement_ServerClick(object sender, EventArgs e)
        {
            if (this.IsPostbackExpected)
            {
                UploadFile();
            }
        }

        protected void btnSearchCandidate_Click(object sender, EventArgs e)
        {
            SearchFolioElements();
        }

        protected void Timer1_Tick(object sender, EventArgs e)
        {
            SearchFolioElements();
        }

        #endregion Events

        #region Private Methods

        /// <summary>
        /// Convierte el texto (si tiene) del input en formato de fecha.
        /// Si no es posible retorna la fecha actual.
        /// </summary>
        private DateTime GetDateTime(HtmlInputText input, string className, string methodName)
        {
            DateTime datetime = DateTime.Now;

            if (input != null && !string.IsNullOrWhiteSpace(input.Value))
            {
                Logger.LogDebug("(%s) (%s) -- Get datetime1: Intentando convertir a datetime. Formato: dd-MM-yyyy HH:mm:ss. Dato: " + input.Value, className, methodName);

                if (!DateTime.TryParseExact(input.Value, "dd-MM-yyyy HH:mm:ss", null, System.Globalization.DateTimeStyles.None, out datetime))
                {
                    datetime = DateTime.Now;

                    // #2- Logger exception
                    Logger.LogError("(%s) (%s) -- Excepcion. Convirtiendo a datetime.", className, methodName);
                    Logger.LogError("(%s) (%s) -- Dato: " + input.Value, className, methodName);
                }
            }

            return datetime;
        }

        private void UploadFile()
        {
            string folioID = _hdnFolioID_selected.Value;
            if (HttpContext.Current.Session["UserID"] != null && !string.IsNullOrWhiteSpace(folioID))
            {
                // #1- Logger variables
                System.Diagnostics.StackFrame stackFrame = new System.Diagnostics.StackFrame();
                string className = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
                string methodName = stackFrame.GetMethod().Name;

                // Source: http://stackoverflow.com/questions/1998452/accessing-input-type-file-at-server-side-in-asp-net

                /* ******** Get file extension ******** */
                string fileName = MyFileUpload.PostedFile.FileName;
                string file_extension = string.Empty;

                if (!string.IsNullOrWhiteSpace(fileName))
                {
                    file_extension = fileName.Substring(fileName.LastIndexOf('.'));
                }

                /* ******** Global variables ******** */
                string userID = HttpContext.Current.Session["UserID"].ToString();

                string repoFilename = "", repoFilenameAUX = "", fullLocalPath = "", relativeLocalPath = "";
                bool ok = true, isFileAUX_created = false, isWavFile = false;

                // File ID
                string guid = Guid.NewGuid().ToString();

                // Get DateTimes 1-2-3...
                DateTime datetime_final = GetDateTime(uploadDate, className, methodName);

                DateTime datetime2_a = GetDateTime(camarasDate1, className, methodName);

                DateTime datetime2_b = GetDateTime(camarasDate2, className, methodName);

                // If is NOT camera recording system function
                if (string.IsNullOrWhiteSpace(txbInputCameraNumber.Value))
                {
                    if (MyFileUpload != null && MyFileUpload.PostedFile != null && !string.IsNullOrWhiteSpace(MyFileUpload.PostedFile.FileName))
                    {
                        /* ******** Configuration variables ******** */

                        string original_filePath = MyFileUpload.PostedFile.FileName;

                        // Repository path
                        string localRepoPath = string.Empty;
                        if (ConfigurationManager.AppSettings != null)
                        {
                            localRepoPath = ConfigurationManager.AppSettings["LocalRepoPath"].ToString();
                        }

                        string server = string.Empty;
                        if (ConfigurationManager.AppSettings != null)
                        {
                            server = ConfigurationManager.AppSettings["DB_Server"].ToString();
                        }

                        // File name
                        repoFilename = guid + ".bin";

                        // File name auxiliar with real extension ==> To get the real duration
                        repoFilenameAUX = guid + file_extension;

                        // Repository relative path
                        relativeLocalPath = datetime_final.Year.ToString("D4") + "\\" + datetime_final.Month.ToString("D2") + "\\" +
                            datetime_final.Day.ToString("D2") + "\\" + datetime_final.Hour.ToString("D2") + "\\";

                        fullLocalPath = localRepoPath + relativeLocalPath; // REAL

                        if (!string.IsNullOrWhiteSpace(fullLocalPath) && !string.IsNullOrWhiteSpace(repoFilenameAUX) && !string.IsNullOrWhiteSpace(file_extension))
                        {
                            try
                            {
                                // Check if directory exists, if not creates it
                                if (!Directory.Exists(Path.GetDirectoryName(fullLocalPath)))
                                {
                                    Directory.CreateDirectory(Path.GetDirectoryName(fullLocalPath));
                                }

                                if (GetAutomaticConvertWavToMp3OnFileUpload())
                                {
                                    // Is WAVE format file ==> Convert to .mp3
                                    isWavFile = file_extension.ToLowerInvariant().Equals(".wav") ? true : false;
                                }

                                // File name auxiliar with real extension ==> To get real duration
                                MyFileUpload.PostedFile.SaveAs(fullLocalPath + repoFilenameAUX);
                                isFileAUX_created = true;
                            }
                            catch (Exception e)
                            {
                                // #2- Logger exception
                                Logger.LogError("(%s) (%s) -- Excepcion. Copiando archivo AUX al server. ERROR: %s", className, methodName, e.Message);
                                ok = false;
                            }
                        }
                    }
                }
                else
                {
                    // IS Camera recording system ****************************************************
                    ok = false;

                    string cameraNumber_str = txbInputCameraNumber.Value;

                    // WS InConcert Operaciones grabación settings
                    string WS_InConcert_Server = "192.168.10.31";
                    if (ConfigurationManager.AppSettings != null)
                    {
                        WS_InConcert_Server = ConfigurationManager.AppSettings["WS_InConcert_Server"].ToString();
                    }

                    string WS_InConcert_Port = "8081";
                    if (ConfigurationManager.AppSettings != null)
                    {
                        WS_InConcert_Port = ConfigurationManager.AppSettings["WS_InConcert_Port"].ToString();
                    }

                    string WS_InConcert_URL_operacionesGrabacion = "RecordingIntegration/WebServices/OperacionesGrabacion.asmx";
                    if (ConfigurationManager.AppSettings != null)
                    {
                        WS_InConcert_URL_operacionesGrabacion = ConfigurationManager.AppSettings["WS_InConcert_URL_operacionesGrabacion"].ToString();
                    }

                    // WS Endpoint
                    EndpointAddress endpointUser = new EndpointAddress(new Uri("http://" + WS_InConcert_Server + ":" + WS_InConcert_Port + "/" + WS_InConcert_URL_operacionesGrabacion));

                    // WS client
                    var wsClient = new RecordingIntegration.OperacionesGrabacionSoapBindingClient("OperacionesGrabacionSoapBinding", endpointUser);

                    // Call WS operation
                    wsClient.videoAsociado(folioID, userID, cameraNumber_str, datetime2_a.ToString("dd'/'MM'/'yyyy HH':'mm"), datetime2_b.ToString("dd'/'MM'/'yyyy HH':'mm"));
                }

                /* ******** Save in DB - ONLY in NOT Camera recording system cases ******** */

                string real_fileName = string.Empty;
                if (!string.IsNullOrWhiteSpace(fileName))
                {
                    real_fileName = Path.GetFileName(fileName);
                }

                if (ok && !string.IsNullOrWhiteSpace(file_extension) && !string.IsNullOrWhiteSpace(real_fileName)
                    && !string.IsNullOrWhiteSpace(relativeLocalPath) && !string.IsNullOrWhiteSpace(repoFilename)
                    && !string.IsNullOrWhiteSpace(fullLocalPath) && !string.IsNullOrWhiteSpace(repoFilenameAUX)
                    && MyFileUpload != null && MyFileUpload.PostedFile != null)
                {
                    // Get file MediaType
                    string mediaType = GetFileMediaType(file_extension);

                    try
                    {
                        /*************** Get Duration ***************/
                        // Source: http://stackoverflow.com/questions/1256841/c-sharp-get-video-file-duration-from-metadata

                        //Source: http://www.codeproject.com/Articles/43208/How-to-get-the-length-duration-of-a-media-File-in-.aspx
                        // http://forums.asp.net/t/1679210.aspx?Get+Video+duration+after+uploading+asp+net+C+

                        double seconds = 0;
                        ShellFile so = ShellFile.FromFilePath(fullLocalPath + repoFilenameAUX);
                        double nanoseconds;
                        double.TryParse(so.Properties.System.Media.Duration.Value.ToString(), out nanoseconds);
                        if (nanoseconds > 0)
                        {
                            seconds = Convert100NanosecondsToMilliseconds(nanoseconds) / 1000;
                        }
                        /*************** END ***************/

                        /*************** Finally save the file in server ***************/

                        // Check if directory exists, if not creates it
                        if (!Directory.Exists(Path.GetDirectoryName(fullLocalPath)))
                        {
                            Directory.CreateDirectory(Path.GetDirectoryName(fullLocalPath));
                        }

                        bool normal_save = true;

                        // If .wav format file ==> convert to .mp3 then save the file
                        if (isWavFile)
                        {
                            // NAudio Source: http://stackoverflow.com/questions/7175701/converting-wav-file-to-wav-file-changing-format
                            try
                            {
                                WaveFormat target = new WaveFormat(44100, 16, 1);
                                using (WaveStream stream = new WaveFileReader(fullLocalPath + repoFilenameAUX))
                                {
                                    WaveFormatConversionStream str = new WaveFormatConversionStream(target, stream);
                                    WaveFileWriter.CreateWaveFile(fullLocalPath + repoFilename, str);
                                }

                                // Update file name (new format: .mp3)
                                if (!string.IsNullOrWhiteSpace(fileName))
                                {
                                    real_fileName = real_fileName.Substring(0, real_fileName.LastIndexOf('.')) + ".mp3";
                                }
                                normal_save = false;
                            }
                            catch (Exception e)
                            {
                                // #2- Logger exception
                                Logger.LogError("(%s) (%s) -- Excepcion. Convirtiendo de .wav a mp3. Si falla lo guarda como .wav. ERROR: %s", className, methodName, e.Message);
                                normal_save = true;
                            }
                        }

                        if (normal_save)
                        {
                            // If not .wav format
                            MyFileUpload.PostedFile.SaveAs(fullLocalPath + repoFilename);
                        }

                        /*************** END ***************/

                        /*************** Save in DB ***************/

                        string bd_path = relativeLocalPath.Replace("\\", "/") + repoFilename;
                        Global.GlobalMethods.AddFolioFile(userID, folioID, real_fileName, datetime_final, Convert.ToInt32(seconds), mediaType, bd_path);

                        /*************** END ***************/
                    }
                    catch (Exception e)
                    {
                        // #2- Logger exception
                        Logger.LogError("(%s) (%s) -- Excepcion. Obteniendo duración de archivo a subir, convirtiendo de .wav a mp3 si aplica, copiando archivo al server y guardando en BD. ERROR: %s", className, methodName, e.Message);
                        ok = false;
                    }
                }

                // Delete File name auxiliar with real extension
                if (isFileAUX_created)
                {
                    try
                    {
                        if (File.Exists(fullLocalPath + repoFilenameAUX))
                        {
                            File.Delete(fullLocalPath + repoFilenameAUX);
                        }
                    }
                    catch (Exception e)
                    {
                        // #2- Logger exception
                        Logger.LogError("(%s) (%s) -- Excepcion. Borrando archivo subido auxiliar para obtener duracion. ERROR: %s", className, methodName, e.Message);
                    }
                }

                // Reload elements
                SearchFolioElements();
            }
        }

        private bool GetAutomaticConvertWavToMp3OnFileUpload()
        {
            bool _AutomaticConvertWavToMp3OnFileUpload = true;
            if (ConfigurationManager.AppSettings != null)
            {
                if (!bool.TryParse(ConfigurationManager.AppSettings["AutomaticConvertWavToMp3OnFileUpload"].ToString().ToLowerInvariant(), out _AutomaticConvertWavToMp3OnFileUpload))
                {
                    _AutomaticConvertWavToMp3OnFileUpload = true;
                }
            }
            return _AutomaticConvertWavToMp3OnFileUpload;
        }

        private string GetFileMediaType(string file_extension)
        {
            var extension = file_extension.TrimStart('.');

            string mediaType = "D";
            switch (extension.ToLowerInvariant())
            {
                case "fbs":
                    {
                        mediaType = "S";
                        break;
                    }
                case "wav":
                case "mp3":
                case "wma":
                case "m4a":
                case "oga":
                    {
                        mediaType = "A";
                        break;
                    }
                case "avi":
                case "wmv":
                case "mp4":
                case "webm":
                case "ogg":
                    {
                        mediaType = "V";
                        break;
                    }
                case "png":
                case "jpg":
                case "jepg":
                case "bmp":
                case "tiff":
                case "gif":
                    {
                        mediaType = "I";
                        break;
                    }
            }
            return mediaType;
        }

        private int GetFileDuration(string path, string mediaType)
        {
            int real_duration = 0;
            if (mediaType == "A" || mediaType == "V")
            {
                // #1- Logger variables
                System.Diagnostics.StackFrame stackFrame = new System.Diagnostics.StackFrame();
                string className = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
                string methodName = stackFrame.GetMethod().Name;

                // Getting the Audio length
                // fullLocalPath + repoFilename
                try
                {
                    using (var wfr = new WaveFileReader(path))
                    {
                        real_duration = (int)wfr.TotalTime.TotalSeconds;
                    }
                }
                catch (Exception e)
                {
                    // #2- Logger exception
                    Logger.LogError("(%s) (%s) -- Excepcion. Obteniendo duracion de archivo a subir. ERROR: %s", className, methodName, e.Message);
                }
            }
            return real_duration;
        }

        private void LoadConfigurationValues()
        {
            string repo = "/inConcert/Repository/";
            if (ConfigurationManager.AppSettings != null)
            {
                repo = ConfigurationManager.AppSettings["LocalRepoPath"].ToString().Replace("\\", "/");
            }
            _hdnLocalRepository.Value = repo;

            // WS Oreka settings
            string WS_Oreka_Server = "192.168.10.31";
            if (ConfigurationManager.AppSettings != null)
            {
                WS_Oreka_Server = ConfigurationManager.AppSettings["WS_Oreka_Server"].ToString();
            }
            _hdnWS_Oreka_Server.Value = WS_Oreka_Server;

            string WS_Oreka_Port = "8080";
            if (ConfigurationManager.AppSettings != null)
            {
                WS_Oreka_Port = ConfigurationManager.AppSettings["WS_Oreka_Port"].ToString();
            }
            _hdnWS_Oreka_Port.Value = WS_Oreka_Port;

            string WS_Oreka_URL = "icweb/replay";
            if (ConfigurationManager.AppSettings != null)
            {
                WS_Oreka_URL = ConfigurationManager.AppSettings["WS_Oreka_URL"].ToString();
            }
            _hdnWS_Oreka_URL.Value = WS_Oreka_URL;

            // WS InConcert settings
            string WS_InConcert_Server = "192.168.10.31";
            if (ConfigurationManager.AppSettings != null)
            {
                WS_InConcert_Server = ConfigurationManager.AppSettings["WS_InConcert_Server"].ToString();
            }
            _hdnWS_InConcert_Server.Value = WS_InConcert_Server;

            string WS_InConcert_Port = "8081";
            if (ConfigurationManager.AppSettings != null)
            {
                WS_InConcert_Port = ConfigurationManager.AppSettings["WS_InConcert_Port"].ToString();
            }
            _hdnWS_InConcert_Port.Value = WS_InConcert_Port;

            string WS_InConcert_URL_download = "RecordingIntegration/WebServices/Download.aspx";
            if (ConfigurationManager.AppSettings != null)
            {
                WS_InConcert_URL_download = ConfigurationManager.AppSettings["WS_InConcert_URL_download"].ToString();
            }
            _hdnWS_InConcert_URL_download.Value = WS_InConcert_URL_download;

            // FBS player settings ----
            // Player default size
            string fbs_width = "557px";
            if (ConfigurationManager.AppSettings != null)
            {
                fbs_width = ConfigurationManager.AppSettings["PlayerFBS_width"].ToString();
            }
            _hdnFbs_width.Value = fbs_width;

            string fbs_height = "390px";
            if (ConfigurationManager.AppSettings != null)
            {
                fbs_height = ConfigurationManager.AppSettings["PlayerFBS_height"].ToString();
            }
            _hdnFbs_height.Value = fbs_height;

            // Player fullscreen size
            string fbs_fullscreen_width = "557px";
            if (ConfigurationManager.AppSettings != null)
            {
                fbs_fullscreen_width = ConfigurationManager.AppSettings["PlayerFBS_fullscreen_width"].ToString();
            }
            _hdnPlayerFBS_fullscreen_width.Value = fbs_fullscreen_width;

            string fbs_fullscreen_height = "390px";
            if (ConfigurationManager.AppSettings != null)
            {
                fbs_fullscreen_height = ConfigurationManager.AppSettings["PlayerFBS_fullscreen_height"].ToString();
            }
            _hdnPlayerFBS_fullscreen_height.Value = fbs_fullscreen_height;

            // Player popup size
            string fbs_popup_width = "300";
            if (ConfigurationManager.AppSettings != null)
            {
                fbs_popup_width = ConfigurationManager.AppSettings["PlayerFBS_popup_width"].ToString();
            }
            _hdnPlayerFBS_popup_width.Value = fbs_popup_width;

            string fbs_popup_height = "500";
            if (ConfigurationManager.AppSettings != null)
            {
                fbs_popup_height = ConfigurationManager.AppSettings["PlayerFBS_popup_height"].ToString();
            }
            _hdnPlayerFBS_popup_height.Value = fbs_popup_height;

            string Webchimera_Install_URL = "https://github.com/RSATom/WebChimera/releases/download/v0.2.9/WebChimera_0.2.9_vlc_2.2.1.msi";
            if (ConfigurationManager.AppSettings != null)
            {
                Webchimera_Install_URL = ConfigurationManager.AppSettings["Webchimera_Install_URL"].ToString();
            }
            _hdnWebchimera_Install_URL.Value = Webchimera_Install_URL;

            string MaxElementsDownload = "6";
            if (ConfigurationManager.AppSettings != null)
            {
                MaxElementsDownload = ConfigurationManager.AppSettings["MaxElementsDownload"].ToString();
            }
            _hdnMaxElementsDownload.Value = MaxElementsDownload;

            string AutoRefreshDataTimeMilliseconds = "300000";
            if (ConfigurationManager.AppSettings != null)
            {
                AutoRefreshDataTimeMilliseconds = ConfigurationManager.AppSettings["AutoRefreshDataTimeMilliseconds"].ToString();
            }

            int data_time = 30000;
            if (!int.TryParse(AutoRefreshDataTimeMilliseconds, out data_time))
            {
                data_time = 30000;
            }
            Timer1.Interval = data_time;

            string Globalplay_defaultDuration = "10";
            if (ConfigurationManager.AppSettings != null)
            {
                Globalplay_defaultDuration = ConfigurationManager.AppSettings["Globalplay_defaultDuration"].ToString();
            }
            _hdnGlobalplay_defaultDuration.Value = Globalplay_defaultDuration;

            string Globalplay_maxCollisionElements = "8";
            if (ConfigurationManager.AppSettings != null)
            {
                Globalplay_maxCollisionElements = ConfigurationManager.AppSettings["Globalplay_maxCollisionElements"].ToString();
            }
            _hdnGlobalplay_maxCollisionElements.Value = Globalplay_maxCollisionElements;

            string Download_WaitingSpinDuration = "3500";
            if (ConfigurationManager.AppSettings != null)
            {
                Download_WaitingSpinDuration = ConfigurationManager.AppSettings["Download_WaitingSpinDuration"].ToString();
            }
            _hdnDownload_WaitingSpinDuration.Value = Download_WaitingSpinDuration;

        }

        private void Logout()
        {
            Session["UserID"] = null;
            Session["UserName"] = null;
            Response.Redirect("Login.aspx");
        }

        private void LoadTypes()
        {
            List<string> list_mediaTypes = GlobalMethods.GetMediaTypes();
            if (list_mediaTypes != null && list_mediaTypes.Count > 0)
            {
                StringBuilder htmlCheckTypes = new StringBuilder();

                int index = 1;
                foreach (string media in list_mediaTypes)
                {
                    string media_name = media;
                    switch (media)
                    {
                        case "S":
                            {
                                media_name = "Grabaciones de pantalla (P)";
                                break;
                            }
                        case "A":
                            {
                                media_name = "Audios (A)";
                                break;
                            }
                        case "V":
                            {
                                media_name = "Videos (V)";
                                break;
                            }
                        case "D":
                            {
                                media_name = "Documentos u otros (D)";
                                break;
                            }
                        case "C":
                            {
                                media_name = "Comentarios (C)";
                                break;
                            }
                        case "I":
                            {
                                media_name = "Imágenes (I)";
                                break;
                            }
                    }
                    if (index % 2 != 0)
                    {
                        htmlCheckTypes.AppendLine("<div class='row'>");
                    }

                    htmlCheckTypes.AppendLine("<div class='col-sm-6'>");
                    htmlCheckTypes.AppendLine("<div class='checkbox pull-left' style='margin-left:8px;'>");
                    htmlCheckTypes.AppendLine("<label>");
                    htmlCheckTypes.AppendLine("<input type='checkbox' name='checkbox_type_" + media + "' type_name=" + media + "  onclick='prepareFilterTimelineElements(this, \"type\", \"" + media + "\")' checked>" + media_name);
                    htmlCheckTypes.AppendLine("</label>");
                    htmlCheckTypes.AppendLine("</div>");
                    htmlCheckTypes.AppendLine("</div>");

                    if (index % 2 == 0 || index == list_mediaTypes.Count)
                    {
                        htmlCheckTypes.AppendLine("</div>");
                    }

                    index++;
                }
                litCheckTypes.Text = htmlCheckTypes.ToString();
            }
        }

        private void LoadRoles()
        {
            if (this.folio_filteredList != null && this.folio_filteredList.Count > 0)
            {
                StringBuilder RtrnHtml = new StringBuilder();
                List<string> list_userGroups = Domain.User.GetUserGroupsNew(this.folio_filteredList.Where(x => x.deleted == 0).ToList());
                if (list_userGroups != null && list_userGroups.Count > 0)
                {
                    int index = 1;
                    StringBuilder htmlCheckRoles = new StringBuilder();
                    foreach (string group in list_userGroups)
                    {
                        if (index % 2 != 0)
                        {
                            htmlCheckRoles.AppendLine("<div class='row'>");
                        }

                        htmlCheckRoles.AppendLine("<div class='col-sm-6'>");
                        htmlCheckRoles.AppendLine("<div class='checkbox pull-left' style='margin-left:8px;'>");
                        htmlCheckRoles.AppendLine("<label>");
                        htmlCheckRoles.AppendLine("<input type='checkbox' name='checkbox_role_" + group + "' onclick='prepareFilterTimelineElements(this, \"role\", \"" + group + "\")' checked>" + group);
                        htmlCheckRoles.AppendLine("</label>");
                        htmlCheckRoles.AppendLine("</div>");
                        htmlCheckRoles.AppendLine("</div>");

                        if (index % 2 == 0 || index == list_userGroups.Count)
                        {
                            htmlCheckRoles.AppendLine("</div>");
                        }

                        index++;
                    }
                    litCheckRoles.Text = htmlCheckRoles.ToString();
                }
            }
        }

        private void SearchFolioElements(string qs_folioID = "")
        {
            // Prepare to run the search after loading & event handling stage in page lifecycle:
            _signalSearchFolioElements = true;
            _argSearchFolioElements = qs_folioID;
        }

        /// <summary>
        /// Returns elements from only 1 Folio
        /// </summary>
        /// <param name="qs_folioID"></param>
        private void DoSearchFolioElements(string qs_folioID = "")
        {
            int index = 0;
            StringBuilder htmlTable = new StringBuilder();

            /****** Table headers ******/

            htmlTable.AppendLine("<table class='table unselectable' id='tblLeftGridElements'>"); // style='display:none;'
            htmlTable.AppendLine("<thead>");
            htmlTable.AppendLine("<tr style='background: #446e9b; color: whitesmoke;'>");
            htmlTable.AppendLine("<th width='3%' style='text-align: center;'><input type='checkbox' id='chbSelectAll' name='timeline_elements_checkAll' class='button' checked></th>");
            htmlTable.AppendLine("<th width='3%' style='text-align: center;'>#</th>");
            htmlTable.AppendLine("<th width='5%' style='text-align: center;'>Usuario</th>");
            htmlTable.AppendLine("<th width='8%' style='text-align: center;'>Local Party</th>");
            htmlTable.AppendLine("<th width='5%' style='text-align: center;'>Remote Party</th>");
            htmlTable.AppendLine("<th width='5%' style='text-align: center;'>Tipo</th>");
            htmlTable.AppendLine("<th width='6%' style='text-align: center;'>Inicio</th>");
            htmlTable.AppendLine("<th width='3%' style='text-align: center;'>Duración</th>");
            htmlTable.AppendLine("</tr>");
            htmlTable.AppendLine("</thead>");
            htmlTable.AppendLine("<tbody>");

            if (string.IsNullOrWhiteSpace(qs_folioID))
            {
                if (!string.IsNullOrWhiteSpace(txbSearchBox1.Text))
                {
                    qs_folioID = txbSearchBox1.Text;
                }
            }

            if (!string.IsNullOrWhiteSpace(qs_folioID))
            {
                this.folio_list = Global.GlobalMethods.GetAllFolios(qs_folioID);
                ViewState["folio_list"] = this.folio_list;

                if (this.folio_list != null && this.folio_list.Count > 0)
                {
                    this.folio_filteredList = this.folio_list.FindAll(x => x.deleted == 0);
                    ViewState["folio_filteredList"] = this.folio_filteredList;

                    string hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName = string.Empty;
                    string hdnElementsIDChecked = string.Empty;

                    // Json object
                    RootObject json_elementList = new RootObject();
                    json_elementList.name = "Elements";
                    json_elementList.color = "#000000";

                    DateTime folio_start = DateTime.MaxValue;
                    DateTime folio_end = DateTime.MinValue;
                    //

                    List<Folio> list = this.folio_filteredList.Where(x => x.deleted == 0).ToList();
                    if (list != null && list.Count > 0)
                    {
                        // Save FolioID only if get results
                        ViewState["FolioID"] = qs_folioID;
                        _hdnFolioID.Value = qs_folioID;

                        foreach (Folio folio in list)
                        {
                            index++;

                            string end_date = folio.timestamp.AddSeconds(folio.duration).ToString("dd'-'MM'-'yyyy HH':'mm':'ss");

                            // Duration
                            TimeSpan time = TimeSpan.FromSeconds(folio.duration);
                            string duration_formatStr = time.ToString(@"hh\:mm\:ss");

                            /****** Hidden fields ******/
                            hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName
                                += folio.tapeID + "#" + folio.groupName + "#" + folio.mediaType.ToString() + "#" + folio.duration + "#" + folio.timestamp.ToString("dd'-'MM'-'yyyy HH':'mm':'ss")
                                + "#" + folio.segmentID + "#" + index + "#" + folio.fileName + "#" + end_date + "#" + folio.filePath + "#" + duration_formatStr + "#" + folio.fileStatus + "#" + folio.userName + "$";

                            // Get max and min value
                            folio_start = folio_start > folio.timestamp ? folio.timestamp : folio_start;
                            folio_end = folio_end < folio.timestamp.AddSeconds(folio.duration) ? folio.timestamp.AddSeconds(folio.duration) : folio_end;

                            /****** Create json data ******/
                            Span json_element = new Span();
                            json_element.name = folio.mediaType == "S" ? "P" : folio.mediaType;
                            json_element.start = folio.timestamp.ToString("dd'-'MM'-'yyyy HH':'mm':'ss");
                            json_element.end = end_date;
                            json_element.id = folio.tapeID.ToString();
                            json_element.type = folio.mediaType;
                            json_element.role = folio.groupName;

                            json_elementList.spans.Add(json_element);

                            // isExtra, type, icon and color
                            //bool isExtra = false; // If its taken from orkextra table
                            string icon = "glyphicon glyphicon-headphones";
                            string media_str = "Grabación";
                            string color_str = "";
                            switch (folio.mediaType)
                            {
                                case "S":
                                    {
                                        icon = "fa fa-video-camera";
                                        media_str = "Grabación";
                                        color_str = "blue";
                                        break;
                                    }
                                case "V":
                                    {
                                        icon = "glyphicon glyphicon-film";
                                        media_str = "Video";
                                        color_str = "purple";
                                        break;
                                    }
                                case "A":
                                    {
                                        icon = "glyphicon glyphicon-headphones";
                                        media_str = "Audio";
                                        color_str = "red";
                                        break;
                                    }
                                case "D":
                                    {
                                        icon = "fa fa-file-text";
                                        media_str = "Documento";
                                        color_str = "green";
                                        break;
                                    }
                                case "C":
                                    {
                                        icon = "glyphicon glyphicon-comment";
                                        media_str = "Comentario";
                                        color_str = "orange";
                                        break;
                                    }
                                case "I":
                                    {
                                        icon = "glyphicon glyphicon-picture";
                                        media_str = "Imagen";
                                        color_str = "Violet";
                                        break;
                                    }
                            }

                            // IsExtra = If filePath is NOT empty, then is extra from incextras table
                            bool isExtra = folio.filePath == string.Empty ? false : true;
                            if (folio.mediaType == "C")
                            {
                                isExtra = true;
                            }

                            string color_icon = "beige";
                            string tr_color = isExtra ? "inherit" : "#D1E2F3";
                            string tr_name = isExtra ? "Extra" : "Oreka";

                            // Onclick event
                            string onclick_event = FolioElements_GetOnClickEvent(folio, index, isExtra, duration_formatStr, media_str);

                            // Title
                            string title = folio.mediaType == "S" ? "Grabación de Pantalla" : media_str;

                            /****** Table data ******/
                            htmlTable.AppendLine("<tr id='tape_" + folio.tapeID + "' style='background-color: " + tr_color + ";' name='" + tr_name + "'>");
                            htmlTable.AppendLine("<td>");

                            htmlTable.AppendLine("<input type='checkbox' name='timeline_elements' class='button' value='" + folio.tapeID + "#" + isExtra.ToString().ToLowerInvariant() + "#" + folio.mediaType + "#" + folio.fileName + "' onclick='manageElement(this, " + folio.tapeID + ", " + (index - 1).ToString() + ", " + JsonConvert.SerializeObject(json_element) + ")' checked>");
                            htmlTable.AppendLine("<td>");
                            htmlTable.AppendLine("<h5>" + index + "</h5>");
                            htmlTable.AppendLine("<td>");
                            htmlTable.AppendLine("<h5>" + folio.userName + "</h5>");
                            htmlTable.AppendLine("<td>");
                            htmlTable.AppendLine("<h5>" + folio.localParty + "</h5>");
                            htmlTable.AppendLine("<td>");
                            htmlTable.AppendLine("<h5>" + folio.remoteParty + "</h5>");
                            htmlTable.AppendLine("<td>");

                            htmlTable.AppendLine("<button type='button' class='btn btn-default btn-sm' style='color:" + color_str + "; opacity: 0.9; background-color: " + color_icon + "; background-image: none;' name='btnTimelineElement' data-toggle='tooltip' ");
                            htmlTable.AppendLine("title=" + title + " onclick='" + onclick_event + "'><span class='" + icon + "' aria-hidden='true'></span></button>");
                            htmlTable.AppendLine("<td>");
                            htmlTable.AppendLine("<h5 id='timestamp'>" + folio.timestamp.ToString("dd'-'MM'-'yyyy HH':'mm':'ss") + "</h5>");
                            htmlTable.AppendLine("<td>");

                            htmlTable.AppendLine("<h5>" + duration_formatStr + "</h5>");
                            htmlTable.AppendLine("</tr>");
                        }
                    }

                    if (hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName.Length > 0)
                    {
                        hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName = hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName.Remove(hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName.Length - 1);
                        _hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName.Value = hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName;
                    }

                    /****** Load bottom Timeline ******/
                    string val1 = JsonConvert.SerializeObject(json_elementList);
                    string val2 = folio_start.ToString("dd'-'MM'-'yyyy HH':'mm':'ss");
                    string val3 = folio_end.ToString("dd'-'MM'-'yyyy HH':'mm':'ss");

                    _hdnJSonList.Value = val1;
                    _hdnJSonStart.Value = val2;
                    _hdnJSonEnd.Value = val3;

                    // Fire the timeframe drawing
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "pre_timeframe_prepare", "pre_timeframe_prepare();", true);
                }
                else
                {
                    // Folio does not exist
                    ViewState["FolioID"] = "0";
                    _hdnJSonEnd.Value = "0";

                    _hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName.Value = string.Empty;
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "clear_timeline", "clear_timeline();", true);
                }
            }
            else
            {
                // Empty Folio search textbox
                ViewState["FolioID"] = "0";
                _hdnJSonEnd.Value = "0";

                _hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName.Value = string.Empty;
                ScriptManager.RegisterStartupScript(this, typeof(Page), "clear_timeline", "clear_timeline();", true);
            }
            htmlTable.AppendLine("</tbody>");
            htmlTable.AppendLine("</table>");

            litTable.Text = htmlTable.ToString();

            lblResultsCount.Text = index.ToString();

            /****** Clear checkbox filters Rols and Types ******/
            LoadRoles();
            LoadTypes();

            // Change Roles and Types filter checkboxes to checked status
            ScriptManager.RegisterStartupScript(this, typeof(Page), "checkRolesAndTypesFilters", "checkRolesAndTypesFilters();", true);
        }

        private string FolioElements_GetOnClickEvent(Folio folio, int index, bool isExtra, string duration_formatStr, string media_str = "")
        {
            string onclick_event = string.Empty;
            if (folio != null)
            {
                media_str = string.IsNullOrWhiteSpace(media_str) ? GetMediaTypeName(folio) : media_str;

                onclick_event = "clickTimelineElement2(" + folio.tapeID + ", " + index + "," + folio.duration + ",\"";
                onclick_event += folio.timestamp.ToString("dd'-'MM'-'yyyy HH':'mm':'ss") + "\",\"" + media_str + "\",";
                onclick_event += folio.segmentID + ", \"" + isExtra.ToString().ToLowerInvariant() + "\", \"" + folio.fileName + "\",\"";
                onclick_event += folio.filePath + "\",\"" + duration_formatStr + "\",\"" + folio.mediaType + "\",\"" + folio.fileStatus + "\")";
            }
            return onclick_event;
        }

        protected void DownloadHTML_Click(object sender, EventArgs e)
        {
            // #1- Logger variables
            System.Diagnostics.StackFrame stackFrame = new System.Diagnostics.StackFrame();
            string className = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
            string methodName = stackFrame.GetMethod().Name;

            List<Tuple<string, string, string, string>> listElementsFilesPath = new List<Tuple<string, string, string, string>>();

            // Source: http://stackoverflow.com/questions/13762338/read-files-from-a-folder-present-in-project
            Directory.SetCurrentDirectory(AppDomain.CurrentDomain.BaseDirectory);

            // Get FolioID
            string folioID = string.Empty;
            if (ViewState["FolioID"] != null)
            {
                folioID = ViewState["FolioID"].ToString();
            }

            // Get static HTML client
            string staticHTML_client = string.Empty;
            if (ConfigurationManager.AppSettings != null)
            {
                staticHTML_client = ConfigurationManager.AppSettings["staticHTML_client_path"].ToString();
            }
            string path = Path.Combine(Directory.GetCurrentDirectory(), staticHTML_client);
            if (!string.IsNullOrWhiteSpace(path) && File.Exists(path))
            {
                string static_HTML = File.ReadAllText(path);
                string div_container_ID = "divElementos";

                // Get dynamic table with elements
                string dynamic_table = litTable.Text;

                /* ************** */
                // HTML Agility Pack: http://htmlagilitypack.codeplex.com/wikipage?title=Examples
                // http://www.codeproject.com/Tips/804660/How-to-Parse-HTML-using-Csharp

                if (!string.IsNullOrWhiteSpace(static_HTML) && !string.IsNullOrWhiteSpace(div_container_ID) && !string.IsNullOrWhiteSpace(dynamic_table))
                {
                    // Create document
                    HtmlDocument html_doc_Table = new HtmlDocument();
                    html_doc_Table.LoadHtml(dynamic_table);

                    // Create collection of tr nodes
                    HtmlNodeCollection tr_nodes_toDownload = new HtmlNodeCollection(html_doc_Table.DocumentNode);

                    // Get all folio elements
                    RootObject json_elementList = JsonConvert.DeserializeObject<RootObject>(_hdnJSonList.Value);
                    List<Span> spans_aux = new List<Span>();

                    // Folio start date and end date
                    DateTime folio_start = DateTime.MaxValue;
                    DateTime folio_end = DateTime.MinValue;

                    string hdnElementsAttributes_str = string.Empty;

                    try
                    {
                        string[] elements_array;
                        if (_hdnElementsToDownload.Value.Length > 0)
                        {
                            // Recorro los elementos seleccionados
                            elements_array = _hdnElementsToDownload.Value.Split('#');
                            if (elements_array != null && elements_array.Length > 0)
                            {
                                int index = 1;

                                string[] fileData_array;
                                foreach (string element in elements_array)
                                {
                                    if (!string.IsNullOrWhiteSpace(element))
                                    {
                                        fileData_array = element.Split('$');
                                        if (fileData_array != null && fileData_array.Length > 3)
                                        {
                                            string file_path = fileData_array[0];
                                            string file_name = fileData_array[1];
                                            string file_isExtra = fileData_array[2];
                                            string segmentID = fileData_array[3];

                                            if (!string.IsNullOrWhiteSpace(file_path) && !string.IsNullOrWhiteSpace(file_name) && !string.IsNullOrWhiteSpace(file_isExtra))
                                            {
                                                HtmlNode tr_node = html_doc_Table.DocumentNode.SelectSingleNode("//tr[@id='tape_" + segmentID + "']");

                                                // Update index number
                                                html_doc_Table.DocumentNode.SelectSingleNode("//tr[@id='tape_" + segmentID + "'] //h5").InnerHtml = index.ToString();
                                                tr_nodes_toDownload.Add(tr_node);

                                                string userName_str = string.Empty;
                                                if(html_doc_Table.DocumentNode.SelectSingleNode("//tr[@id='tape_" + segmentID + "'] ").ChildNodes[1].ChildNodes[3].ChildNodes[3].ChildNodes[1].InnerHtml != null)
                                                {
                                                    userName_str = html_doc_Table.DocumentNode.SelectSingleNode("//tr[@id='tape_" + segmentID + "'] ").ChildNodes[1].ChildNodes[3].ChildNodes[3].ChildNodes[1].InnerHtml;
                                                }

                                                // Recorro todos los elementos del folio
                                                foreach (var span in json_elementList.spans)
                                                {
                                                    if (span.id == segmentID)
                                                    {
                                                        spans_aux.Add(span);

                                                        // JSon Element data
                                                        string groupName = span.name; // missing data !!
                                                        string mediaType = span.type;
                                                        string duration = span.duration;
                                                        string timestamp = span.start;
                                                        string fileName = file_name; // missing data !!
                                                        string end_date = span.end;
                                                        string filePath = file_path; // missing data !!
                                                        string duration_formatStr = span.duration;
                                                        string fileStatus = "OK";
                                                        string userName = string.Empty;

                                                        if (!string.IsNullOrWhiteSpace(userName_str))
                                                        {
                                                            userName = userName_str;
                                                        }

                                                        // Get filtered elements MIN date
                                                        DateTime timestamp_date = DateTime.Now;
                                                        if (!DateTime.TryParseExact(timestamp, "dd-MM-yyyy HH:mm:ss", null, System.Globalization.DateTimeStyles.None, out timestamp_date))
                                                        {
                                                            timestamp_date = DateTime.Now;
                                                        }

                                                        // Get filtered elements MAX date
                                                        DateTime end_date_date = DateTime.Now;
                                                        if (!DateTime.TryParseExact(end_date, "dd-MM-yyyy HH:mm:ss", null, System.Globalization.DateTimeStyles.None, out end_date_date))
                                                        {
                                                            end_date_date = DateTime.Now;
                                                        }

                                                        var diffInSeconds = (end_date_date - timestamp_date).TotalSeconds;

                                                        // Get MX and MIN value of filtered folio
                                                        folio_start = folio_start > timestamp_date ? timestamp_date : folio_start;
                                                        folio_end = folio_end < end_date_date ? end_date_date : folio_end;

                                                        duration = diffInSeconds.ToString();
                                                        duration_formatStr = string.Format("{0:00}:{1:00}:{2:00}", diffInSeconds / 3600, (diffInSeconds / 60) % 60, diffInSeconds % 60);

                                                        // Recupero la lista de elementos
                                                        hdnElementsAttributes_str += segmentID + "#" + groupName + "#" + mediaType + "#" + duration + "#" + timestamp + "#" + segmentID
                                                            + "#" + index + "#" + fileName + "#" + end_date + "#" + filePath + "#" + duration_formatStr + "#" + fileStatus + "#" + userName + "$";
                                                    }
                                                } // foreach

                                                listElementsFilesPath.Add(new Tuple<string, string, string, string>(segmentID, file_path, file_isExtra, file_name));
                                            }
                                        }
                                    }

                                    index++;
                                } // foreach
                            }

                        }
                    }
                    catch (Exception ex)
                    {
                        // #2- Logger exception
                        Logger.LogError("(%s) (%s) -- Excepcion. Recorriendo elementos seleccionados. ERROR: %s", className, methodName, ex.Message);
                    }

                    if (tr_nodes_toDownload != null && tr_nodes_toDownload.Count > 0)
                    {
                        try
                        {
                            // Filtrar elementos seleccionados
                            HtmlNode tr_node_parent = html_doc_Table.DocumentNode.SelectSingleNode("//tbody");
                            if (tr_node_parent != null)
                            {
                                tr_node_parent.RemoveAllChildren();
                                tr_node_parent.AppendChildren(tr_nodes_toDownload);
                            }

                            // Create document
                            HtmlDocument html_doc = new HtmlDocument();
                            html_doc.LoadHtml(static_HTML);

                            // Create table node
                            HtmlNode table_node = HtmlNode.CreateNode(html_doc_Table.DocumentNode.OuterHtml);

                            // Get container div
                            HtmlNode divElementos_node = html_doc.DocumentNode.SelectSingleNode("//div[@id='" + div_container_ID + "']");
                            if (divElementos_node != null)
                            {
                                divElementos_node.AppendChild(table_node);
                            }

                            #region Send data by Hidden Fields 
                            
                            // Send FolioID
                            HtmlNode hdnFolioID_node = html_doc.DocumentNode.SelectSingleNode("//input[@id='_hdnFolioID']");
                            if (hdnFolioID_node != null)
                            {
                                hdnFolioID_node.Attributes["value"].Value = folioID;
                            }

                            // Send JSonList updated
                            json_elementList.spans = spans_aux;
                            HtmlNode hdnJSonList_node = html_doc.DocumentNode.SelectSingleNode("//input[@id='_hdnJSonList']");
                            if (hdnJSonList_node != null)
                            {
                                string value = JsonConvert.SerializeObject(json_elementList).Replace(@"""", "&quot;"); ;
                                hdnJSonList_node.Attributes["value"].Value = value;
                            }

                            // Send JSonList updated
                            HtmlNode hdnJSonStart_node = html_doc.DocumentNode.SelectSingleNode("//input[@id='_hdnJSonStart']");
                            if (hdnJSonStart_node != null)
                            {
                                string folio_start_final = folio_start.ToString("dd'-'MM'-'yyyy HH':'mm':'ss");
                                hdnJSonStart_node.Attributes["value"].Value = folio_start_final;
                            }

                            // Send JSonList updated
                            HtmlNode hdnJSonEnd_node = html_doc.DocumentNode.SelectSingleNode("//input[@id='_hdnJSonEnd']");
                            if (hdnJSonEnd_node != null)
                            {
                                string folio_end_final = folio_end.ToString("dd'-'MM'-'yyyy HH':'mm':'ss");
                                hdnJSonEnd_node.Attributes["value"].Value = folio_end_final;
                            }

                            // Send Element attributes updated
                            if (hdnElementsAttributes_str.Length > 0)
                            {
                                hdnElementsAttributes_str = hdnElementsAttributes_str.Remove(hdnElementsAttributes_str.Length - 1);
                            }

                            HtmlNode hdnElementsAttributes = html_doc.DocumentNode.SelectSingleNode("//input[@id='_hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName']");
                            if (hdnElementsAttributes != null)
                            {
                                hdnElementsAttributes.Attributes["value"].Value = hdnElementsAttributes_str;
                            }

                            // Send Build datetime                        
                            HtmlNode divBuild_node = html_doc.DocumentNode.SelectSingleNode("//div[@id='mainFooterCopyright']/label");
                            if (divBuild_node != null)
                            {
                                divBuild_node.InnerHtml = "Generado: " + DateTime.Now;
                            }

                            // Send Folder Path resources
                            string Download_folderPath_resources = @"files\Resources";
                            if (ConfigurationManager.AppSettings != null)
                            {
                                Download_folderPath_resources = ConfigurationManager.AppSettings["Download_folderPath_resources"].ToString();
                            }

                            HtmlNode hdnDownload_folderPath_resources = html_doc.DocumentNode.SelectSingleNode("//input[@id='_hdnDownload_folderPath_resources']");
                            if (hdnDownload_folderPath_resources != null)
                            {
                                hdnDownload_folderPath_resources.Attributes["value"].Value = Download_folderPath_resources;
                            }

                            #endregion

                            // Convert to string
                            static_HTML = html_doc.DocumentNode.OuterHtml;
                        }
                        catch (Exception ex)
                        {
                            // #2- Logger exception
                            Logger.LogError("(%s) (%s) -- Excepcion. Manipulando HTML DOM con HTML Agility Pack. ERROR: %s", className, methodName, ex.Message);
                        }

                        // Download ZIP file
                        Download_ZipFiles(static_HTML, listElementsFilesPath, folioID);
                    }
                }
            }
        }

        protected void Download_ZipFiles(string static_HTML, List<Tuple<string, string, string, string>> listElementsFilesPath, string folioID)
        {
            // Revisar
            // http://dotnetzip.codeplex.com/discussions/231933
            // http://dotnetzip.codeplex.com/discussions/234342

            if (!string.IsNullOrWhiteSpace(static_HTML))
            {
                // #1- Logger variables
                System.Diagnostics.StackFrame stackFrame = new System.Diagnostics.StackFrame();
                string className = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
                string methodName = stackFrame.GetMethod().Name;

                string zipName = String.Format("MP_portable{0}.exe", folioID);

                Logger.LogDebug("(%s) (%s) -- Inicia método de descarga de zip de elementos del folio.", className, methodName);

                #region Get Configuration variables 

                // Get Client file name
                string client_fileName_html = "MP_portable.html";
                if (ConfigurationManager.AppSettings != null)
                {
                    client_fileName_html = ConfigurationManager.AppSettings["Download_ClientName"].ToString();
                }

                // Get Client file name exe
                string client_fileName_exe = "MP_portable.exe";
                if (ConfigurationManager.AppSettings != null)
                {
                    client_fileName_exe = ConfigurationManager.AppSettings["Download_ClientName_exe"].ToString();
                }

                // Get Client folder name: files
                string folder_path_files = @"MP_client\files";
                if (ConfigurationManager.AppSettings != null)
                {
                    folder_path_files = ConfigurationManager.AppSettings["Download_folderPath_files"].ToString();
                }

                // Get Client folder name: fonts
                string folder_path_fonts = @"MP_client\fonts";
                if (ConfigurationManager.AppSettings != null)
                {
                    folder_path_fonts = ConfigurationManager.AppSettings["Download_folderPath_fonts"].ToString();
                }

                // Get Client folder name: image
                string folder_path_image = @"MP_client\image";
                if (ConfigurationManager.AppSettings != null)
                {
                    folder_path_image = ConfigurationManager.AppSettings["Download_folderPath_image"].ToString();
                }

                // Get Client folder name: images
                string folder_path_images = @"MP_client\images";
                if (ConfigurationManager.AppSettings != null)
                {
                    folder_path_images = ConfigurationManager.AppSettings["Download_folderPath_images"].ToString();
                }

                // Get Client file name: Dashboard.js
                string filePath_DashboardJS = @"assets\js\Dashboard.js";
                if (ConfigurationManager.AppSettings != null)
                {
                    filePath_DashboardJS = ConfigurationManager.AppSettings["Download_filePath_DashboardJS"].ToString();
                }

                // Get Client file name: Globalplay.js
                string filePath_GlobalplayJS = @"assets\js\Globalplay.js";
                if (ConfigurationManager.AppSettings != null)
                {
                    filePath_GlobalplayJS = ConfigurationManager.AppSettings["Download_filePath_GlobalplayJS"].ToString();
                }

                // Get Client file name: Dashboard.css
                string filePath_DashboardCSS = @"assets\css\Dashboard.css";
                if (ConfigurationManager.AppSettings != null)
                {
                    filePath_DashboardCSS = ConfigurationManager.AppSettings["Download_filePath_DashboardCSS"].ToString();
                }

                // Get Client folder path
                string filePath_Resources = @"files\Resources";
                if (ConfigurationManager.AppSettings != null)
                {
                    filePath_Resources = ConfigurationManager.AppSettings["Download_folderPath_resources"].ToString();
                }

                // Get exe icon path
                string iconFile_path = @"assets\images\logo_portable.ico";
                if (ConfigurationManager.AppSettings != null)
                {
                    iconFile_path = ConfigurationManager.AppSettings["Download_IconFile"].ToString();
                }

                #endregion

                if (!string.IsNullOrWhiteSpace(client_fileName_html) && !string.IsNullOrWhiteSpace(client_fileName_exe) &&
                !string.IsNullOrWhiteSpace(filePath_Resources) && !string.IsNullOrWhiteSpace(folder_path_files) &&
                !string.IsNullOrWhiteSpace(folder_path_fonts) && !string.IsNullOrWhiteSpace(filePath_DashboardJS) &&
                !string.IsNullOrWhiteSpace(filePath_GlobalplayJS) && !string.IsNullOrWhiteSpace(filePath_DashboardCSS) && !string.IsNullOrWhiteSpace(iconFile_path))
                {
                    // Zip Source: http://www.aspsnippets.com/Articles/Download-multiple-files-as-Zip-Archive-File-in-ASPNet-using-C-and-VBNet.aspx
                    using (ZipFile zip = new ZipFile())
                    {
                        zip.AlternateEncodingUsage = ZipOption.AsNecessary;

                        /* ******************** Elements files ******************** */
                        if (listElementsFilesPath != null && listElementsFilesPath.Count > 0)
                        {
                            WebClient webClient = new WebClient();
                            foreach (Tuple<string, string, string, string> element in listElementsFilesPath)
                            {
                                try
                                {
                                    string segmentID = element.Item1;
                                    string path = element.Item2;
                                    string isExtra = element.Item3;
                                    string fileName = element.Item4;

                                    if (!string.IsNullOrWhiteSpace(segmentID) && !string.IsNullOrWhiteSpace(path) &&
                                        !string.IsNullOrWhiteSpace(isExtra) && !string.IsNullOrWhiteSpace(fileName))
                                    {
                                        string fileExtension = Path.GetExtension(fileName);
                                        if (!string.IsNullOrWhiteSpace(fileExtension))
                                        {
                                            byte[] fileInMemory = webClient.DownloadData(path);
                                            if (fileInMemory != null && fileInMemory.Length > 0)
                                            {
                                                zip.AddEntry(filePath_Resources + @"\" + segmentID + fileExtension, fileInMemory);
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    // #2- Logger exception
                                    Logger.LogError("(%s) (%s) -- Excepcion. Copiando archivos de elementos al ZIP. ERROR: %s", className, methodName, ex.Message);
                                }
                            } // foreach
                        }

                        /* ******************** Directories Files ******************** */

                        // Check if exists all folders
                        Directory.SetCurrentDirectory(AppDomain.CurrentDomain.BaseDirectory);
                        string folder_path_1 = Path.Combine(Directory.GetCurrentDirectory(), folder_path_files);
                        string folder_path_2 = Path.Combine(Directory.GetCurrentDirectory(), folder_path_fonts);
                        string folder_path_3 = Path.Combine(Directory.GetCurrentDirectory(), folder_path_image);
                        string folder_path_4 = Path.Combine(Directory.GetCurrentDirectory(), folder_path_images);

                        if (!string.IsNullOrWhiteSpace(folder_path_1) && !string.IsNullOrWhiteSpace(folder_path_2) &&
                            !string.IsNullOrWhiteSpace(folder_path_3) && !string.IsNullOrWhiteSpace(folder_path_4))
                        {
                            bool ok = Directory.Exists(folder_path_1) && Directory.Exists(folder_path_2) && Directory.Exists(folder_path_3) &&
                            Directory.Exists(folder_path_4) ? true : false;
                            if (ok)
                            {
                                try
                                {
                                    // Add folders directories
                                    zip.AddDirectory(folder_path_1, Path.GetFileName(folder_path_1));
                                    zip.AddDirectory(folder_path_2, Path.GetFileName(folder_path_2));
                                    zip.AddDirectory(folder_path_3, Path.GetFileName(folder_path_3));
                                    zip.AddDirectory(folder_path_4, Path.GetFileName(folder_path_4));

                                    // Add HTML File in root directory of zip
                                    zip.AddEntry("MP_portable.html", static_HTML, Encoding.UTF8);

                                    #region Copiado de archivos dinámicos

                                    // Únicos archivos copiados dinámicamente desde la solución para mejorar el mantenimiento del código de la aplicación: Dashboard.js, Globalplay.js y Dashboard.css
                                    string DashboardJS_path = Path.Combine(Directory.GetCurrentDirectory(), filePath_DashboardJS);
                                    if (File.Exists(DashboardJS_path))
                                    {
                                        zip.AddFile(DashboardJS_path, @"files\assets\js\");
                                    }
                                    else
                                    {
                                        ok = false;
                                    }

                                    string GlobalplayJS_path = Path.Combine(Directory.GetCurrentDirectory(), filePath_GlobalplayJS);
                                    if (File.Exists(GlobalplayJS_path))
                                    {
                                        zip.AddFile(GlobalplayJS_path, @"files\assets\js\");
                                    }
                                    else
                                    {
                                        ok = false;
                                    }

                                    string DashboardCSS_path = Path.Combine(Directory.GetCurrentDirectory(), filePath_DashboardCSS);
                                    if (File.Exists(DashboardCSS_path))
                                    {
                                        zip.AddFile(DashboardCSS_path, @"files\assets\css\");
                                    }
                                    else
                                    {
                                        ok = false;
                                    }

                                    #endregion

                                    if (ok)
                                    {
                                        Logger.LogDebug("(%s) (%s) -- Iniciando creación del zip a descargar con librería ZipDotNet.", className, methodName);
                                        //zip.Save(Response.OutputStream);

                                        // Repository temp path
                                        string repository_temp = string.Empty;
                                        if (ConfigurationManager.AppSettings != null)
                                        {
                                            repository_temp = ConfigurationManager.AppSettings["LocalTempPath"].ToString();
                                        }

                                        string path_temp = string.Empty;
                                        try
                                        {
                                            // Check if directory exists, if not creates it
                                            if (!Directory.Exists(Path.GetDirectoryName(repository_temp)))
                                            {
                                                Directory.CreateDirectory(Path.GetDirectoryName(repository_temp));
                                            }
                                            path_temp = Path.GetTempPath();
                                            Logger.LogDebug("(%s) (%s) -- Intentando descargar archivos del zip a carpeta temporal: " + path_temp, className, methodName);

                                            SelfExtractorSaveOptions options = new SelfExtractorSaveOptions();
                                            options.Flavor = SelfExtractorFlavor.ConsoleApplication;
                                            options.Quiet = true;
                                            options.Description = "inConcert MP_Portable";
                                            options.DefaultExtractDirectory = @"%TEMP%";
                                            options.PostExtractCommandLine = @"%TEMP%\" + client_fileName_html;
                                            options.ExtractExistingFile = ExtractExistingFileAction.OverwriteSilently;

                                            // Get icon path
                                            string icon_path = Path.Combine(Directory.GetCurrentDirectory(), iconFile_path);
                                            if (File.Exists(icon_path))
                                            {
                                                options.IconFile = icon_path;
                                            }

                                            zip.TempFileFolder = path_temp;
                                            zip.SaveSelfExtractor(".\\Temp\\" + client_fileName_exe, options);
                                            Logger.LogDebug("(%s) (%s) -- Terminó OK de descargar archivos del zip a carpeta temporal: " + path_temp, className, methodName);
                                        }
                                        catch (Exception ex)
                                        {
                                            // #2- Logger exception
                                            Logger.LogError("(%s) (%s) -- Excepcion. Creando archivo ZIP temporal en %s. ERROR: %s", className, methodName, path_temp, ex.Message);

                                            ok = false;
                                        }

                                    }
                                    else
                                    {
                                        // #2- Logger exception
                                        Logger.LogError("(%s) (%s) -- ERROR. Creando archivo ZIP, archivos no encontrados. ERROR", className, methodName, "");
                                    }

                                    if (ok)
                                    {
                                        string path = Server.MapPath(".\\Temp\\" + client_fileName_exe);
                                        if (File.Exists(path))
                                        {
                                            //ScriptManager.RegisterStartupScript(this, typeof(Page), "ok_script", "alert('OK');", true);

                                            Response.Clear();
                                            Response.BufferOutput = false;
                                            Response.ContentType = "application/exe";
                                            Response.AddHeader("content-disposition", "attachment; filename=" + zipName);
                                            Response.TransmitFile(path);
                                            Response.Flush();
                                            Response.End();

                                            // Fire the timeframe drawing
                                            //ScriptManager.RegisterStartupScript(this, typeof(Page), "afterDownloadFiles", "afterDownloadFiles();", true);

                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    // #2- Logger exception
                                    Logger.LogError("(%s) (%s) -- Excepcion. Creando archivo ZIP. ERROR: %s", className, methodName, ex.Message);
                                }
                            }
                        }
                    }
                }
            }
        }
     
        [System.Web.Services.WebMethod]
        public static string DownloadHTML_Click_2(string dynamic_table, string hdnJSonList, string hdnElementsToDownload, string hdnFolioID)
        {
            // #1- Logger variables
            System.Diagnostics.StackFrame stackFrame = new System.Diagnostics.StackFrame();
            string className = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
            string methodName = stackFrame.GetMethod().Name;

            List<Tuple<string, string, string, string>> listElementsFilesPath = new List<Tuple<string, string, string, string>>();

            // Source: http://stackoverflow.com/questions/13762338/read-files-from-a-folder-present-in-project
            Directory.SetCurrentDirectory(AppDomain.CurrentDomain.BaseDirectory);

            // Get static HTML client
            string staticHTML_client = string.Empty;
            if (ConfigurationManager.AppSettings != null)
            {
                staticHTML_client = ConfigurationManager.AppSettings["staticHTML_client_path"].ToString();
            }
            string path = Path.Combine(Directory.GetCurrentDirectory(), staticHTML_client);
            if (!string.IsNullOrWhiteSpace(path) && File.Exists(path))
            {
                string static_HTML = File.ReadAllText(path);
                string div_container_ID = "divElementos";

                // Get dynamic table with elements
                //string dynamic_table = litTable.Text;

                /* ************** */
                // HTML Agility Pack: http://htmlagilitypack.codeplex.com/wikipage?title=Examples
                // http://www.codeproject.com/Tips/804660/How-to-Parse-HTML-using-Csharp

                if (!string.IsNullOrWhiteSpace(static_HTML) && !string.IsNullOrWhiteSpace(div_container_ID) && !string.IsNullOrWhiteSpace(dynamic_table))
                {
                    // Create document
                    HtmlDocument html_doc_Table = new HtmlDocument();
                    html_doc_Table.LoadHtml(dynamic_table);

                    // Create collection of tr nodes
                    HtmlNodeCollection tr_nodes_toDownload = new HtmlNodeCollection(html_doc_Table.DocumentNode);

                    // Get all folio elements
                    RootObject json_elementList = JsonConvert.DeserializeObject<RootObject>(hdnJSonList);
                    List<Span> spans_aux = new List<Span>();

                    // Folio start date and end date
                    DateTime folio_start = DateTime.MaxValue;
                    DateTime folio_end = DateTime.MinValue;

                    string hdnElementsAttributes_str = string.Empty;

                    try
                    {
                        string[] elements_array;
                        if (hdnElementsToDownload.Length > 0)
                        {
                            // Recorro los elementos seleccionados
                            elements_array = hdnElementsToDownload.Split('#');
                            if (elements_array != null && elements_array.Length > 0)
                            {
                                int index = 1;

                                string[] fileData_array;
                                foreach (string element in elements_array)
                                {
                                    if (!string.IsNullOrWhiteSpace(element))
                                    {
                                        fileData_array = element.Split('$');
                                        if (fileData_array != null && fileData_array.Length > 3)
                                        {
                                            string file_path = fileData_array[0];
                                            string file_name = fileData_array[1];
                                            string file_isExtra = fileData_array[2];
                                            string segmentID = fileData_array[3];

                                            if (!string.IsNullOrWhiteSpace(file_path) && !string.IsNullOrWhiteSpace(file_name) && !string.IsNullOrWhiteSpace(file_isExtra))
                                            {
                                                HtmlNode tr_node = html_doc_Table.DocumentNode.SelectSingleNode("//tr[@id='tape_" + segmentID + "']");

                                                // Update index number
                                                html_doc_Table.DocumentNode.SelectSingleNode("//tr[@id='tape_" + segmentID + "'] //h5").InnerHtml = index.ToString();
                                                tr_nodes_toDownload.Add(tr_node);

                                                string userName_str = string.Empty;
                                                if (html_doc_Table.DocumentNode.SelectSingleNode("//tr[@id='tape_" + segmentID + "'] ").ChildNodes[1].ChildNodes[3].ChildNodes[3].ChildNodes[1].InnerHtml != null)
                                                {
                                                    userName_str = html_doc_Table.DocumentNode.SelectSingleNode("//tr[@id='tape_" + segmentID + "'] ").ChildNodes[1].ChildNodes[3].ChildNodes[3].ChildNodes[1].InnerHtml;
                                                }

                                                // Recorro todos los elementos del folio
                                                foreach (var span in json_elementList.spans)
                                                {
                                                    if (span.id == segmentID)
                                                    {
                                                        spans_aux.Add(span);

                                                        // JSon Element data
                                                        string groupName = span.name; // missing data !!
                                                        string mediaType = span.type;
                                                        string duration = span.duration;
                                                        string timestamp = span.start;
                                                        string fileName = file_name; // missing data !!
                                                        string end_date = span.end;
                                                        string filePath = file_path; // missing data !!
                                                        string duration_formatStr = span.duration;
                                                        string fileStatus = "OK";
                                                        string userName = string.Empty;

                                                        if (!string.IsNullOrWhiteSpace(userName_str))
                                                        {
                                                            userName = userName_str;
                                                        }

                                                        // Get filtered elements MIN date
                                                        DateTime timestamp_date = DateTime.Now;
                                                        if (!DateTime.TryParseExact(timestamp, "dd-MM-yyyy HH:mm:ss", null, System.Globalization.DateTimeStyles.None, out timestamp_date))
                                                        {
                                                            timestamp_date = DateTime.Now;
                                                        }

                                                        // Get filtered elements MAX date
                                                        DateTime end_date_date = DateTime.Now;
                                                        if (!DateTime.TryParseExact(end_date, "dd-MM-yyyy HH:mm:ss", null, System.Globalization.DateTimeStyles.None, out end_date_date))
                                                        {
                                                            end_date_date = DateTime.Now;
                                                        }

                                                        var diffInSeconds = (end_date_date - timestamp_date).TotalSeconds;

                                                        // Get MX and MIN value of filtered folio
                                                        folio_start = folio_start > timestamp_date ? timestamp_date : folio_start;
                                                        folio_end = folio_end < end_date_date ? end_date_date : folio_end;

                                                        duration = diffInSeconds.ToString();
                                                        duration_formatStr = string.Format("{0:00}:{1:00}:{2:00}", diffInSeconds / 3600, (diffInSeconds / 60) % 60, diffInSeconds % 60);

                                                        // Recupero la lista de elementos
                                                        hdnElementsAttributes_str += segmentID + "#" + groupName + "#" + mediaType + "#" + duration + "#" + timestamp + "#" + segmentID
                                                            + "#" + index + "#" + fileName + "#" + end_date + "#" + filePath + "#" + duration_formatStr + "#" + fileStatus + "#" + userName + "$";
                                                    }
                                                } // foreach

                                                listElementsFilesPath.Add(new Tuple<string, string, string, string>(segmentID, file_path, file_isExtra, file_name));
                                            }
                                        }
                                    }

                                    index++;
                                } // foreach
                            }

                        }
                    }
                    catch (Exception ex)
                    {
                        // #2- Logger exception
                        Logger.LogError("(%s) (%s) -- Excepcion. Recorriendo elementos seleccionados. ERROR: %s", className, methodName, ex.Message);
                    }

                    if (tr_nodes_toDownload != null && tr_nodes_toDownload.Count > 0)
                    {
                        try
                        {
                            // Filtrar elementos seleccionados
                            HtmlNode tr_node_parent = html_doc_Table.DocumentNode.SelectSingleNode("//tbody");
                            if (tr_node_parent != null)
                            {
                                tr_node_parent.RemoveAllChildren();
                                tr_node_parent.AppendChildren(tr_nodes_toDownload);
                            }

                            // Create document
                            HtmlDocument html_doc = new HtmlDocument();
                            html_doc.LoadHtml(static_HTML);

                            // Create table node
                            HtmlNode table_node = HtmlNode.CreateNode(html_doc_Table.DocumentNode.OuterHtml);

                            // Get container div
                            HtmlNode divElementos_node = html_doc.DocumentNode.SelectSingleNode("//div[@id='" + div_container_ID + "']");
                            if (divElementos_node != null)
                            {
                                divElementos_node.AppendChild(table_node);
                            }

                            #region Send data by Hidden Fields 

                            // Send FolioID
                            HtmlNode hdnFolioID_node = html_doc.DocumentNode.SelectSingleNode("//input[@id='_hdnFolioID']");
                            if (hdnFolioID_node != null)
                            {
                                hdnFolioID_node.Attributes["value"].Value = hdnFolioID;
                            }

                            // Send JSonList updated
                            json_elementList.spans = spans_aux;
                            HtmlNode hdnJSonList_node = html_doc.DocumentNode.SelectSingleNode("//input[@id='_hdnJSonList']");
                            if (hdnJSonList_node != null)
                            {
                                string value = JsonConvert.SerializeObject(json_elementList).Replace(@"""", "&quot;"); ;
                                hdnJSonList_node.Attributes["value"].Value = value;
                            }

                            // Send JSonList updated
                            HtmlNode hdnJSonStart_node = html_doc.DocumentNode.SelectSingleNode("//input[@id='_hdnJSonStart']");
                            if (hdnJSonStart_node != null)
                            {
                                string folio_start_final = folio_start.ToString("dd'-'MM'-'yyyy HH':'mm':'ss");
                                hdnJSonStart_node.Attributes["value"].Value = folio_start_final;
                            }

                            // Send JSonList updated
                            HtmlNode hdnJSonEnd_node = html_doc.DocumentNode.SelectSingleNode("//input[@id='_hdnJSonEnd']");
                            if (hdnJSonEnd_node != null)
                            {
                                string folio_end_final = folio_end.ToString("dd'-'MM'-'yyyy HH':'mm':'ss");
                                hdnJSonEnd_node.Attributes["value"].Value = folio_end_final;
                            }

                            // Send Element attributes updated
                            if (hdnElementsAttributes_str.Length > 0)
                            {
                                hdnElementsAttributes_str = hdnElementsAttributes_str.Remove(hdnElementsAttributes_str.Length - 1);
                            }

                            HtmlNode hdnElementsAttributes = html_doc.DocumentNode.SelectSingleNode("//input[@id='_hdnTapeID_RoleGroupName_TypeTapeType_duration_timestamp_segmentID_count_fileName_endDate_filePath_duration_formatStr_fileStatus_userName']");
                            if (hdnElementsAttributes != null)
                            {
                                hdnElementsAttributes.Attributes["value"].Value = hdnElementsAttributes_str;
                            }

                            // Send Build datetime                        
                            HtmlNode divBuild_node = html_doc.DocumentNode.SelectSingleNode("//div[@id='mainFooterCopyright']/label");
                            if (divBuild_node != null)
                            {
                                divBuild_node.InnerHtml = "Generado: " + DateTime.Now;
                            }

                            // Send Folder Path resources
                            string Download_folderPath_resources = @"files\Resources";
                            if (ConfigurationManager.AppSettings != null)
                            {
                                Download_folderPath_resources = ConfigurationManager.AppSettings["Download_folderPath_resources"].ToString();
                            }

                            HtmlNode hdnDownload_folderPath_resources = html_doc.DocumentNode.SelectSingleNode("//input[@id='_hdnDownload_folderPath_resources']");
                            if (hdnDownload_folderPath_resources != null)
                            {
                                hdnDownload_folderPath_resources.Attributes["value"].Value = Download_folderPath_resources;
                            }

                            #endregion

                            // Convert to string
                            static_HTML = html_doc.DocumentNode.OuterHtml;
                        }
                        catch (Exception ex)
                        {
                            // #2- Logger exception
                            Logger.LogError("(%s) (%s) -- Excepcion. Manipulando HTML DOM con HTML Agility Pack. ERROR: %s", className, methodName, ex.Message);
                        }

                        // Download ZIP file
                        Download_ZipFiles_2(static_HTML, listElementsFilesPath, hdnFolioID);
                    }
                }
            }
            return "";
        }


        [System.Web.Services.WebMethod]
        public static void Download_ZipFiles_2(string static_HTML, List<Tuple<string, string, string, string>> listElementsFilesPath, string FolioID_str)
        {
            // Revisar
            // http://dotnetzip.codeplex.com/discussions/231933
            // http://dotnetzip.codeplex.com/discussions/234342

            if (!string.IsNullOrWhiteSpace(static_HTML))
            {
                // #1- Logger variables
                System.Diagnostics.StackFrame stackFrame = new System.Diagnostics.StackFrame();
                string className = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
                string methodName = stackFrame.GetMethod().Name;
               
                string zipName = String.Format("MP_portable{0}.exe", FolioID_str);

                #region Get Configuration variables 

                // Get Client file name
                string client_fileName_html = "MP_portable.html";
                if (ConfigurationManager.AppSettings != null)
                {
                    client_fileName_html = ConfigurationManager.AppSettings["Download_ClientName"].ToString();
                }

                // Get Client file name exe
                string client_fileName_exe = "MP_portable.exe";
                if (ConfigurationManager.AppSettings != null)
                {
                    client_fileName_exe = ConfigurationManager.AppSettings["Download_ClientName_exe"].ToString();
                }

                // Get Client folder name: files
                string folder_path_files = @"MP_client\files";
                if (ConfigurationManager.AppSettings != null)
                {
                    folder_path_files = ConfigurationManager.AppSettings["Download_folderPath_files"].ToString();
                }

                // Get Client folder name: fonts
                string folder_path_fonts = @"MP_client\fonts";
                if (ConfigurationManager.AppSettings != null)
                {
                    folder_path_fonts = ConfigurationManager.AppSettings["Download_folderPath_fonts"].ToString();
                }

                // Get Client folder name: image
                string folder_path_image = @"MP_client\image";
                if (ConfigurationManager.AppSettings != null)
                {
                    folder_path_image = ConfigurationManager.AppSettings["Download_folderPath_image"].ToString();
                }

                // Get Client folder name: images
                string folder_path_images = @"MP_client\images";
                if (ConfigurationManager.AppSettings != null)
                {
                    folder_path_images = ConfigurationManager.AppSettings["Download_folderPath_images"].ToString();
                }

                // Get Client file name: Dashboard.js
                string filePath_DashboardJS = @"assets\js\Dashboard.js";
                if (ConfigurationManager.AppSettings != null)
                {
                    filePath_DashboardJS = ConfigurationManager.AppSettings["Download_filePath_DashboardJS"].ToString();
                }

                // Get Client file name: Globalplay.js
                string filePath_GlobalplayJS = @"assets\js\Globalplay.js";
                if (ConfigurationManager.AppSettings != null)
                {
                    filePath_GlobalplayJS = ConfigurationManager.AppSettings["Download_filePath_GlobalplayJS"].ToString();
                }

                // Get Client file name: Dashboard.css
                string filePath_DashboardCSS = @"assets\css\Dashboard.css";
                if (ConfigurationManager.AppSettings != null)
                {
                    filePath_DashboardCSS = ConfigurationManager.AppSettings["Download_filePath_DashboardCSS"].ToString();
                }

                // Get Client folder path
                string filePath_Resources = @"files\Resources";
                if (ConfigurationManager.AppSettings != null)
                {
                    filePath_Resources = ConfigurationManager.AppSettings["Download_folderPath_resources"].ToString();
                }

                // Get exe icon path
                string iconFile_path = @"assets\files\images\logo_portable.ico";
                if (ConfigurationManager.AppSettings != null)
                {
                    iconFile_path = ConfigurationManager.AppSettings["Download_IconFile"].ToString();
                }

                #endregion

                if (!string.IsNullOrWhiteSpace(client_fileName_html) && !string.IsNullOrWhiteSpace(client_fileName_exe) &&
                !string.IsNullOrWhiteSpace(filePath_Resources) && !string.IsNullOrWhiteSpace(folder_path_files) &&
                !string.IsNullOrWhiteSpace(folder_path_fonts) && !string.IsNullOrWhiteSpace(filePath_DashboardJS) &&
                !string.IsNullOrWhiteSpace(filePath_GlobalplayJS) && !string.IsNullOrWhiteSpace(filePath_DashboardCSS) && !string.IsNullOrWhiteSpace(filePath_DashboardCSS))
                {
                    // Zip Source: http://www.aspsnippets.com/Articles/Download-multiple-files-as-Zip-Archive-File-in-ASPNet-using-C-and-VBNet.aspx
                    using (ZipFile zip = new ZipFile())
                    {
                        zip.AlternateEncodingUsage = ZipOption.AsNecessary;

                        /* ******************** Elements files ******************** */
                        if (listElementsFilesPath != null && listElementsFilesPath.Count > 0)
                        {
                            WebClient webClient = new WebClient();
                            foreach (Tuple<string, string, string, string> element in listElementsFilesPath)
                            {
                                try
                                {
                                    string segmentID = element.Item1;
                                    string path = element.Item2;
                                    string isExtra = element.Item3;
                                    string fileName = element.Item4;

                                    if (!string.IsNullOrWhiteSpace(segmentID) && !string.IsNullOrWhiteSpace(path) &&
                                        !string.IsNullOrWhiteSpace(isExtra) && !string.IsNullOrWhiteSpace(fileName))
                                    {
                                        string fileExtension = Path.GetExtension(fileName);
                                        if (!string.IsNullOrWhiteSpace(fileExtension))
                                        {
                                            byte[] fileInMemory = webClient.DownloadData(path);
                                            if (fileInMemory != null && fileInMemory.Length > 0)
                                            {
                                                zip.AddEntry(filePath_Resources + @"\" + segmentID + fileExtension, fileInMemory);
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    // #2- Logger exception
                                    Logger.LogError("(%s) (%s) -- Excepcion. Copiando archivos de elementos al ZIP. ERROR: %s", className, methodName, ex.Message);
                                }
                            } // foreach
                        }

                        /* ******************** Directories Files ******************** */

                        // Check if exists all folders
                        Directory.SetCurrentDirectory(AppDomain.CurrentDomain.BaseDirectory);
                        string folder_path_1 = Path.Combine(Directory.GetCurrentDirectory(), folder_path_files);
                        string folder_path_2 = Path.Combine(Directory.GetCurrentDirectory(), folder_path_fonts);
                        string folder_path_3 = Path.Combine(Directory.GetCurrentDirectory(), folder_path_image);
                        string folder_path_4 = Path.Combine(Directory.GetCurrentDirectory(), folder_path_images);

                        if (!string.IsNullOrWhiteSpace(folder_path_1) && !string.IsNullOrWhiteSpace(folder_path_2) &&
                            !string.IsNullOrWhiteSpace(folder_path_3) && !string.IsNullOrWhiteSpace(folder_path_4))
                        {
                            bool ok = Directory.Exists(folder_path_1) && Directory.Exists(folder_path_2) && Directory.Exists(folder_path_3) &&
                            Directory.Exists(folder_path_4) ? true : false;
                            if (ok)
                            {
                                try
                                {
                                    // Add folders directories
                                    zip.AddDirectory(folder_path_1, Path.GetFileName(folder_path_1));
                                    zip.AddDirectory(folder_path_2, Path.GetFileName(folder_path_2));
                                    zip.AddDirectory(folder_path_3, Path.GetFileName(folder_path_3));
                                    zip.AddDirectory(folder_path_4, Path.GetFileName(folder_path_4));

                                    // Add HTML File in root directory of zip
                                    zip.AddEntry("MP_portable.html", static_HTML, Encoding.UTF8);

                                    #region Copiado de archivos dinámicos

                                    // Únicos archivos copiados dinámicamente desde la solución para mejorar el mantenimiento del código de la aplicación: Dashboard.js, Globalplay.js y Dashboard.css
                                    string DashboardJS_path = Path.Combine(Directory.GetCurrentDirectory(), filePath_DashboardJS);
                                    if (File.Exists(DashboardJS_path))
                                    {
                                        zip.AddFile(DashboardJS_path, @"files\assets\js\");
                                    }
                                    else
                                    {
                                        ok = false;
                                    }

                                    string GlobalplayJS_path = Path.Combine(Directory.GetCurrentDirectory(), filePath_GlobalplayJS);
                                    if (File.Exists(GlobalplayJS_path))
                                    {
                                        zip.AddFile(GlobalplayJS_path, @"files\assets\js\");
                                    }
                                    else
                                    {
                                        ok = false;
                                    }

                                    string DashboardCSS_path = Path.Combine(Directory.GetCurrentDirectory(), filePath_DashboardCSS);
                                    if (File.Exists(DashboardCSS_path))
                                    {
                                        zip.AddFile(DashboardCSS_path, @"files\assets\css\");
                                    }
                                    else
                                    {
                                        ok = false;
                                    }

                                    #endregion

                                    if (ok)
                                    {
                                        //zip.Save(Response.OutputStream);

                                        // Repository temp path
                                        string repository_temp = string.Empty;
                                        if (ConfigurationManager.AppSettings != null)
                                        {
                                            repository_temp = ConfigurationManager.AppSettings["LocalTempPath"].ToString();
                                        }

                                        try
                                        {
                                            // Check if directory exists, if not creates it
                                            if (!Directory.Exists(Path.GetDirectoryName(repository_temp)))
                                            {
                                                Directory.CreateDirectory(Path.GetDirectoryName(repository_temp));
                                            }

                                            SelfExtractorSaveOptions options = new SelfExtractorSaveOptions();
                                            options.Flavor = SelfExtractorFlavor.ConsoleApplication;
                                            options.Quiet = true;
                                            options.Description = "inConcert MP_Portable";
                                            options.DefaultExtractDirectory = repository_temp;
                                            options.PostExtractCommandLine = repository_temp + "\\" + client_fileName_html;
                                            options.ExtractExistingFile = ExtractExistingFileAction.OverwriteSilently;
                                            options.RemoveUnpackedFilesAfterExecute = true;
                                            zip.SaveSelfExtractor(".\\Temp\\" + client_fileName_exe, options);
                                        }
                                        catch (Exception ex)
                                        {
                                            // #2- Logger exception
                                            Logger.LogError("(%s) (%s) -- Excepcion. Creando archivo ZIP. ERROR: %s", className, methodName, ex.Message);

                                            ok = false;
                                        }

                                    }
                                    else
                                    {
                                        // #2- Logger exception
                                        Logger.LogError("(%s) (%s) -- ERROR. Creando archivo ZIP, archivos no encontrados. ERROR", className, methodName, "");
                                    }

                                    if (ok)
                                    {
                                        /*
                                        string path = Server.MapPath(".\\Temp\\" + client_fileName_exe);
                                        if (File.Exists(path))
                                        {
                                            //ScriptManager.RegisterStartupScript(this, typeof(Page), "ok_script", "alert('OK');", true);

                                            Response.Clear();
                                            Response.BufferOutput = false;
                                            Response.ContentType = "application/exe";
                                            Response.AddHeader("content-disposition", "attachment; filename=" + zipName);
                                            Response.TransmitFile(path);
                                            Response.Flush();
                                            Response.End();

                                            //Response.WriteFile(path);
                                            //Response.Flush();
                                            //HttpContext.Current.ApplicationInstance.CompleteRequest();
                                            //Response.End();

                                            // Fire the timeframe drawing
                                            //ScriptManager.RegisterStartupScript(this, typeof(Page), "afterDownloadFiles", "afterDownloadFiles();", true);

                                        }
                                        */
                                    }
                                }
                                catch (Exception ex)
                                {
                                    // #2- Logger exception
                                    Logger.LogError("(%s) (%s) -- Excepcion. Creando archivo ZIP. ERROR: %s", className, methodName, ex.Message);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static DateTime GetLinkerTime(Assembly assembly, TimeZoneInfo target = null)
        {
            var filePath = assembly.Location;
            const int c_PeHeaderOffset = 60;
            const int c_LinkerTimestampOffset = 8;

            var buffer = new byte[2048];

            using (var stream = new FileStream(filePath, FileMode.Open, FileAccess.Read))
                stream.Read(buffer, 0, 2048);

            var offset = BitConverter.ToInt32(buffer, c_PeHeaderOffset);
            var secondsSince1970 = BitConverter.ToInt32(buffer, offset + c_LinkerTimestampOffset);
            var epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);

            var linkTimeUtc = epoch.AddSeconds(secondsSince1970);

            var tz = target ?? TimeZoneInfo.Local;
            var localTime = TimeZoneInfo.ConvertTimeFromUtc(linkTimeUtc, tz);

            return localTime;
        }

        #endregion Private Methods

        #region Static Methods

        public static double Convert100NanosecondsToMilliseconds(double nanoseconds)
        {
            // One million nanoseconds in 1 millisecond,
            // but we are passing in 100ns units...
            return nanoseconds * 0.0001;
        }

        private static string GetMediaTypeName(Folio folio)
        {
            string media_str = "Grabación";
            if (folio != null && !string.IsNullOrWhiteSpace(media_str))
            {
                switch (folio.mediaType)
                {
                    case "S":
                        {
                            media_str = "Grabación";
                            break;
                        }
                    case "A":
                        {
                            media_str = "Audio";
                            break;
                        }
                    case "V":
                        {
                            media_str = "Video";
                            break;
                        }
                    case "D":
                        {
                            media_str = "Documento";
                            break;
                        }
                    case "C":
                        {
                            media_str = "Comentario";
                            break;
                        }
                    case "I":
                        {
                            media_str = "Imagen";
                            break;
                        }
                }
            }
            return media_str;
        }

        #endregion Static Methods

        #region Web Methods

        [System.Web.Services.WebMethod]
        public static string AddFolioComment(string userID, string folioID, string comment, string date, string duration)
        {
            Span json_element = null;
            if (!string.IsNullOrWhiteSpace(userID) && !string.IsNullOrWhiteSpace(folioID) && !string.IsNullOrWhiteSpace(comment) && !string.IsNullOrWhiteSpace(date) && !string.IsNullOrWhiteSpace(duration))
            {
                // #1- Logger variables
                System.Diagnostics.StackFrame stackFrame = new System.Diagnostics.StackFrame();
                string className = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
                string methodName = stackFrame.GetMethod().Name;

                // #1-2- Params register
                Logger.LogDebug("(%s) (%s) -- Info WebMethod. Testing AddFolioComment", className, methodName);
                Logger.LogDebug("(%s) (%s) -- Info WebMethod. Parametros recibidos: " + userID + ", " + folioID + ", " + comment + ", " + date + ", " + duration, className, methodName);

                int duration_int = 0;
                if (!int.TryParse(duration, out duration_int))
                {
                    duration_int = 0;

                    // #2- Logger exception
                    Logger.LogError("(%s) (%s) -- Excepcion. Convirtiendo a int.", className, methodName);
                    Logger.LogError("(%s) (%s) -- Dato: " + duration, className, methodName);
                }

                string date_final_start = date;
                string date_final_end = date;
                DateTime date_2 = DateTime.Now;
                Logger.LogDebug("(%s) (%s) -- Intentando convertir a datetime. Formato: dd-MM-yyyy HH:mm:ss. Dato: " + date.ToString(), className, methodName);
                if (!DateTime.TryParseExact(date, "dd-MM-yyyy HH:mm:ss", null, System.Globalization.DateTimeStyles.None, out date_2))
                {
                    date_final_start = date_final_end = date;

                    // #2- Logger exception
                    Logger.LogError("(%s) (%s) -- Excepcion. Convirtiendo a datetime.", className, methodName);
                    Logger.LogError("(%s) (%s) -- Dato: " + date, className, methodName);
                }
                else
                {
                    date_final_start = date_2.ToString("dd'-'MM'-'yyyy HH':'mm':'ss");
                    date_final_end = date_2.AddSeconds(duration_int).ToString("dd'-'MM'-'yyyy HH':'mm':'ss");
                }
                Logger.LogDebug("(%s) (%s) -- Datetime date_final_start: " + date_final_start, className, methodName);
                Logger.LogDebug("(%s) (%s) -- Datetime date_final_end: " + date_final_end, className, methodName);

                // Save in DB
                int elementID = Global.GlobalMethods.AddFolioComment(userID, folioID, comment, date_2, duration_int);

                /****** Create json data ******/
                json_element = new Span();
                json_element.name = comment;
                json_element.start = date_final_start;
                json_element.end = date_final_end;
                json_element.id = elementID.ToString();
                json_element.type = "C";
                json_element.duration = duration; // new
                json_element.role = string.Empty;
            }
            return JsonConvert.SerializeObject(json_element);
        }

        [System.Web.Services.WebMethod]
        public static bool RemoveElement(int tapeID, bool isExtra)
        {
            // #1- Logger variables
            System.Diagnostics.StackFrame stackFrame = new System.Diagnostics.StackFrame();
            string className = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
            string methodName = stackFrame.GetMethod().Name;

            // #1-2- Params register
            Logger.LogDebug("(%s) (%s) -- Info WebMethod. Parametros recibidos: " + tapeID.ToString() + ", " + isExtra.ToString(), className, methodName);

            return tapeID > 0 ? Global.GlobalMethods.RemoveTimelineElement(tapeID, isExtra) : false;
        }

        [System.Web.Services.WebMethod]
        public static bool RemoveElementSelected(string list_elements)
        {
            bool ret = false;
            if (!string.IsNullOrWhiteSpace(list_elements))
            {
                // #1- Logger variables
                System.Diagnostics.StackFrame stackFrame = new System.Diagnostics.StackFrame();
                string className = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
                string methodName = stackFrame.GetMethod().Name;

                string[] element_array = list_elements.Split(',');
                if (element_array.Length > 0)
                {
                    foreach (string element in element_array)
                    {
                        string[] attributes_array = element.Split('#');
                        if (attributes_array.Length > 1)
                        {
                            string tapeID_str = attributes_array[0];
                            string isExtra_str = attributes_array[1];

                            bool isExtra = false;
                            if (!bool.TryParse(isExtra_str, out isExtra))
                            {
                                isExtra = false;

                                // #2- Logger exception
                                Logger.LogError("(%s) (%s) -- Excepcion. Convirtiendo a boolean.", className, methodName);
                                Logger.LogError("(%s) (%s) -- Dato: " + isExtra_str, className, methodName);
                            }

                            int tapeID_int = 0;
                            if (!int.TryParse(tapeID_str, out tapeID_int))
                            {
                                tapeID_int = 0;

                                // #2- Logger exception
                                Logger.LogError("(%s) (%s) -- Excepcion. Convirtiendo a int.", className, methodName);
                                Logger.LogError("(%s) (%s) -- Dato: " + tapeID_str, className, methodName);
                            }
                            if (tapeID_int > 0)
                            {
                                ret = Global.GlobalMethods.RemoveTimelineElement(tapeID_int, isExtra);
                            }
                        }
                    } //foreach
                }
            }
            return ret;

            // Source: http://stackoverflow.com/questions/12895913/what-is-the-simplest-way-to-pass-javascript-object-to-asp-net-codebehind-method
        }

        [System.Web.Services.WebMethod]
        public static int ConfirmRemoveElement(string userID, string password_input, int tapeID, bool isExtra)
        {
            int result = 0;
            /* 0 - Invalid password
             * 1 - OK
             * 2 - DB Error
             * */
            if (!string.IsNullOrWhiteSpace(userID) && !string.IsNullOrWhiteSpace(password_input))
            {
                // #1- Logger variables
                System.Diagnostics.StackFrame stackFrame = new System.Diagnostics.StackFrame();
                string className = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
                string methodName = stackFrame.GetMethod().Name;

                // #1-2- Params register
                Logger.LogDebug("(%s) (%s) -- Info WebMethod. Parametros recibidos: " + userID + ", " + password_input + ", " + tapeID.ToString() + ", " + isExtra.ToString(), className, methodName);

                User user = new User(userID, "");
                if (user != null)
                {
                    string uID = Global.GlobalMethods.CheckLogin(user.userName, password_input);
                    {
                        if (!string.IsNullOrWhiteSpace(uID))
                        {
                            result = 1; // OK
                        }
                    }
                }

                if (result == 1)
                {
                    result = Global.GlobalMethods.RemoveTimelineElement(tapeID, isExtra) ? 1 : 2;
                }
            }
            return result;
        }

        #endregion Web Methods
    }
}